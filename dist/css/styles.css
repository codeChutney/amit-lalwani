@charset "UTF-8";
@import 'https://file.myfontastic.com/DNZuRqZzDWCAfLwPV36W5E/icons.css';
@import 'https://fonts.googleapis.com/css?family=Oswald:300,400,700';
@import 'https://fonts.googleapis.com/css?family=Roboto+Condensed:300,400,700';
@import 'https://fonts.googleapis.com/css?family=Noto+Sans:400,700';
@import 'https://fonts.googleapis.com/css?family=Ubuntu+Condensed';
@import 'https://file.myfontastic.com/DNZuRqZzDWCAfLwPV36W5E/icons.css';
@import 'https://fonts.googleapis.com/css?family=Oswald:300,400,700';
@import 'https://fonts.googleapis.com/css?family=Roboto+Condensed:300,400,700';
@import 'https://fonts.googleapis.com/css?family=Noto+Sans:400,700';
@import 'https://fonts.googleapis.com/css?family=Ubuntu+Condensed';
.slidesjs-pagination, .main-menu {
  list-style: none;
  padding-left: 0;
  margin: 0; }

/**
  EDgrid es una librerÃ­a CSS para construir layouts con Responsive Web Design
  Importe este archivo en su proyecto para empezar a usarlo
**/
*,
*:before,
*:after {
  box-sizing: border-box; }

body {
  margin: 0;
  font-family: sans-serif; }

img {
  max-width: 100%;
  height: auto; }

a {
  text-decoration: none; }
  a:hover {
    text-decoration: none; }

.ed-container, .resume__container {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
  width: 85%; }

.ed-item, .slides, .resume__history, .resume__skills {
  margin: 0;
  padding-left: 1em;
  padding-right: 1em; }

.ed-item {
  width: 100%; }
  .ed-item.ed-container {
    padding-left: 0;
    padding-right: 0; }

.fancybox-wrap {
  position: absolute !important;
  z-index: 1100 !important; }

.fancybox-overlay {
  background: rgba(0, 0, 0, 0.75);
  z-index: 1000; }

.slides {
  width: 100%;
  display: none;
  position: relative;
  z-index: 1; }
  .slides a:hover {
    text-decoration: none; }
  .slides img {
    display: block;
    width: 100%;
    height: auto; }

.slidesjs-navigation {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  height: 50px;
  width: 50px;
  line-height: 50px;
  text-align: center;
  background: rgba(0, 0, 0, 0.5);
  color: #fff;
  font-size: 1.5em;
  border-radius: 50%;
  text-shadow: 2px 2px #070D12, 1px 1px #070D12, 2px 2px #070D12;
  opacity: .5;
  transition: all 0.3s;
  z-index: 2000; }
  .slidesjs-navigation:hover {
    opacity: 1; }
  .slidesjs-navigation::before {
    position: relative;
    top: 3px !important; }

.slidesjs-previous {
  left: 1em; }
  .slidesjs-previous::before {
    left: -3px; }

.slidesjs-next {
  right: 1em; }
  .slidesjs-next::before {
    left: 2px; }

.slidesjs-pagination {
  position: absolute;
  z-index: 1000;
  bottom: 1em;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  right: 2em; }
  .slidesjs-pagination a {
    margin: 0 .5em;
    color: #FFFFFF;
    text-shadow: 2px 2px rgba(0, 0, 0, 0.5), 1px 1px rgba(0, 0, 0, 0.5); }
    .slidesjs-pagination a::before {
      position: relative;
      top: 0 !important; }
  @media screen and (max-width: 639px) {
    .slidesjs-pagination {
      -webkit-transform: scale(0.8);
      -ms-transform: scale(0.8);
      transform: scale(0.8); } }

body {
  background: #FDFDFD;
  font-family: "Ubuntu Condensed", sans-serif;
  color: #444;
  height: 100vh;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column; }

a {
  color: inherit;
  text-decoration: none; }

p, blockquote, li {
  font-size: 1em;
  line-height: 1.5; }

p {
  margin: 0 0 1em 0; }
  p:last-child, p:only-child {
    margin: 0; }

h1, h2, h3, h4, h5, h6 {
  font-family: "Noto Sans", sans-serif;
  font-weight: 700;
  text-transform: normal;
  color: #2b2b2b;
  background: none;
  margin: 0;
  width: 100%; }

h1 {
  font-size: 2em;
  line-height: 1.2; }

h2 {
  font-size: 1.6em; }

h3 {
  font-size: 1.3em; }

h4 {
  font-size: 1em; }

h5 {
  font-size: 0.9em; }

h6 {
  font-size: 0.8em; }

section {
  width: calc(100vw - 160px);
  height: 100vh;
  overflow-y: auto;
  padding-top: 60px;
  position: relative; }
  @media screen and (max-width: 1023px) {
    section {
      width: 100vw;
      left: 160px; } }
  @media screen and (max-width: 1023px) {
    section {
      width: 100vw;
      left: 160px; } }

.main-nav {
  height: calc(100vh - 160px - 5em);
  max-height: 600px; }

.main-menu {
  height: 100%;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column; }
  .main-menu li {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-align-items: center;
    -ms-flex-align: center;
    align-items: center;
    -webkit-flex: auto;
    -ms-flex: auto;
    flex: auto;
    border-bottom: 1px solid rgba(253, 253, 253, 0.1);
    height: auto; }
  .main-menu a {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
    -webkit-justify-content: center;
    -ms-flex-pack: center;
    justify-content: center;
    -webkit-align-items: center;
    -ms-flex-align: center;
    align-items: center;
    width: 100%;
    height: 100%;
    transition: all 0.3s;
    font-size: .75em;
    color: rgba(253, 253, 253, 0.3);
    text-transform: uppercase; }
    .main-menu a span {
      font-size: 2em; }
    .main-menu a:hover, .main-menu a.selected {
      color: rgba(253, 253, 253, 0.75); }

.main-header {
  width: 160px;
  height: 100vh;
  background: #1C262B;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: fixed;
  overflow-y: auto;
  z-index: 90;
  top: 0; }
  @media screen and (min-width: 1024px) {
    .main-header {
      left: 0; } }

.top__title {
  position: fixed;
  z-index: 100;
  color: #FDFDFD; }
  .top__title h1 {
    color: inherit; }
  @media screen and (max-width: 1023px) {
    .top__title {
      width: 100%;
      background: #070D12;
      left: 0;
      transition: all 0.3s;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      height: 3rem; }
      .top__title a {
        display: block;
        width: 4.5rem;
        line-height: 3rem;
        font-size: 1.5em;
        border-right: 1px solid rgba(253, 253, 253, 0.2);
        text-align: center;
        white-space: nowrap; }
      .top__title h1 {
        font-size: 1.5em;
        line-height: 3rem;
        text-align: left;
        padding-left: 1em; } }
  @media screen and (min-width: 1024px) {
    .top__title {
      position: fixed;
      left: 0;
      background: #8ACB82;
      height: 2.25rem;
      top: calc(160px - 1em); }
      .top__title a {
        bottom: 0;
        display: none; }
      .top__title h1 {
        width: 160px;
        font-size: 1em;
        text-align: center;
        line-height: 2.25rem;
        height: 2.25rem; } }

@media screen and (max-width: 1023px) {
  .active > .top__title {
    width: calc(100% - 160px);
    left: 160px; } }

.top {
  background: radial-gradient(#777 1%, #333);
  padding: .5em 0; }
  .top img {
    display: block; }

.bottom {
  margin-top: auto;
  text-align: center;
  color: rgba(253, 253, 253, 0.2);
  font-size: .8em; }
  .bottom span {
    margin-left: 3px; }

.home {
  background: url(../img/bg.jpg) center center/cover no-repeat;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end; }
  .home::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background: rgba(28, 38, 43, 0.75); }
  .home__message {
    position: relative;
    z-index: 50;
    margin-bottom: 5em;
    color: #FDFDFD; }
  .home__span, .home__pro {
    text-align: center;
    display: block;
    font-size: 1.3em;
    color: inherit; }
  .home__name {
    text-align: center;
    font-size: 3em;
    margin: 0;
    line-height: 1;
    color: inherit; }
  .home__pro {
    padding-top: 1em; }

body {
  background: #EBF0DF; }

.resume {
  background: none;
  padding-bottom: 3em;
  position: relative; }
  .resume__container {
    margin-top: 3em; }
  .resume__history, .resume__skills {
    width: 100%; }
    @media screen and (min-width: 640px) {
      .resume__history, .resume__skills {
        width: 50%; } }
  .resume__history {
    padding-left: 2.5em;
    margin-top: 2em;
    border-left: 3px solid #FDFDFD; }
    .resume__history:first-child {
      margin-top: 0; }
  @media screen and (max-width: 639px) {
    .resume__skills {
      margin-top: 2em; } }
  @media screen and (min-width: 1024px) {
    .resume__skills {
      margin-top: -.5em; } }
  .resume__skills__title {
    position: relative;
    color: #FDFDFD;
    background: #8ACB82;
    width: 75%;
    max-width: 300px;
    margin: auto;
    height: 30px;
    line-height: 30px;
    font-size: 1em;
    text-transform: uppercase;
    text-align: center; }
    .resume__skills__title::before, .resume__skills__title::after {
      content: '';
      position: absolute;
      display: block;
      height: 100%;
      width: 30px;
      background: #57b54c;
      z-index: -1 !important;
      border: 5px solid transparent; }
      @media screen and (min-width: 1024px) {
        .resume__skills__title::before, .resume__skills__title::after {
          z-index: -1; } }
    .resume__skills__title::before {
      left: calc((30px - 5px) * -1);
      top: -5px;
      border-right-color: #3d7f35;
      border-radius: 3px 0 0 3px; }
    .resume__skills__title::after {
      right: calc((30px - 5px) * -1);
      bottom: -5px;
      border-left-color: #3d7f35;
      border-radius: 0 3px 3px 0; }
  .resume__title {
    position: relative;
    margin-top: 2em; }
    .resume__title:nth-of-type(1) {
      margin-top: 0; }
    .resume__title > span, .resume__title > h3 {
      display: inline-block; }
    .resume__title > span {
      position: absolute;
      left: -3rem;
      width: 3rem;
      height: 3rem;
      line-height: 3rem;
      background: #8ACB82;
      color: #FDFDFD;
      font-size: 1.5em;
      text-align: center;
      -webkit-transform: translate(-35%, -25%);
      -ms-transform: translate(-35%, -25%);
      transform: translate(-35%, -25%);
      border-radius: 50%; }
    .resume__title > h3 {
      text-transform: uppercase; }
  .resume__content {
    margin-top: 2em; }
    .resume__content h4 {
      font-size: 1em;
      text-transform: uppercase; }
    .resume__content h5 {
      color: rgba(28, 38, 43, 0.45);
      margin: .5em 0 1em; }

.date {
  position: relative;
  margin-bottom: 1.5em; }
  .date p {
    background: #8ACB82;
    display: table;
    text-transform: uppercase;
    line-height: 20px;
    height: 20px;
    padding: 0 1em;
    color: #FDFDFD;
    font-size: .9em; }
    .date p:before, .date p::after {
      content: '';
      position: absolute; }
    .date p:before {
      width: 15px;
      height: 15px;
      border-radius: 50%;
      background: #FDFDFD;
      left: -3rem;
      top: 50%;
      -webkit-transform: translateY(-50%);
      -ms-transform: translateY(-50%);
      transform: translateY(-50%); }
    .date p::after {
      left: -10px;
      top: 0;
      width: 0;
      height: 0;
      border: 10px solid #8ACB82;
      border-left-color: transparent; }
  .date.green p::before {
    background: #8ACB82 !important; }

[class^="icon-"]::before {
  position: relative;
  top: 3px; }

body {
  overflow-x: hidden;
  position: relative;
  width: 100vw;
  height: 100vh; }
  @media screen and (max-width: 1023px) {
    body {
      left: -160px;
      transition: all 0.3s; } }
  @media screen and (min-width: 1024px) {
    body {
      padding-left: 160px; } }
  body.active {
    left: 0; }

.title_page {
  display: block;
  text-align: center;
  font-size: 2em; }
  .title_page span {
    font-size: 2em; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5jc3MiLCJjb25maWcvX2ZvbnRzLnNjc3MiLCJmdW5jdGlvbnMvX3BsYWNlaG9sZGVycy5zY3NzIiwibGF5b3V0L19lZC1ncmlkLnNjc3MiLCJsYXlvdXQvY29tcG9uZW50cy9fYmFzZS5zY3NzIiwibGF5b3V0L2NvbXBvbmVudHMvX2NvcmUuc2NzcyIsImNvbmZpZy9fdmFyaWFibGVzLnNjc3MiLCJ1aS9jb21wb25lbnRzL19tb2RhbC5zY3NzIiwidWkvY29tcG9uZW50cy9fc2xpZGVzLnNjc3MiLCJmdW5jdGlvbnMvX2Z1bmN0aW9ucy5zY3NzIiwibGF5b3V0L2NvbXBvbmVudHMvX21lZGlhLXF1ZXJpZXMuc2NzcyIsImJhc2UvX2Jhc2Uuc2NzcyIsImNvbmZpZy9fY29sb3JzLnNjc3MiLCJ0aGVtZS9fbWVudXMuc2NzcyIsInRoZW1lL19oZWFkZXIuc2NzcyIsInRoZW1lL2hvbWUuc2NzcyIsInRoZW1lL3Jlc3VtZS5zY3NzIiwibW9kdWxlcy9fbW9kdWxlcy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQjtBQ0NqQix3RUFBTztBQU1QLHFFQUFPO0FBZ0JQLCtFQUFPO0FBTVAsb0VBQU87QUFHUCxtRUFBTztBQS9CUCx3RUFBTztBQU1QLHFFQUFPO0FBZ0JQLCtFQUFPO0FBTVAsb0VBQU87QUFHUCxtRUFBTztBQ2hDUDtFQUNFLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsVUFBVSxFQUNYOztBQ0pEOzs7R0FHRztBQ0ZIOzs7RUFHRSx1QkFBdUIsRUFDeEI7O0FBRUQ7RUFDRSxVQUFnQjtFQUNoQix3QkFBeUIsRUFDMUI7O0FBR0Q7RUFDRSxnQkFBaUI7RUFDakIsYUFBaUIsRUFDbEI7O0FBRUQ7RUFDRSxzQkFBdUIsRUFHeEI7RUFKRDtJQUdZLHNCQUF3QixFQUFFOztBQ3BCdEM7RUFDRSxzQkFBb0I7RUFBcEIscUJBQW9CO0VBQXBCLGNBQW9CO0VBQ3BCLHdCQUFvQjtFQUFwQixvQkFBb0I7RUFBcEIsZ0JB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b3J0ICdodHRwczovL2ZpbGUubXlmb250YXN0aWMuY29tL0ROWnVScVp6RFdDQWZMd1BWMzZXNUUvaWNvbnMuY3NzJztcbkBpbXBvcnQgJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Pc3dhbGQ6MzAwLDQwMCw3MDAnO1xuQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvYm90bytDb25kZW5zZWQ6MzAwLDQwMCw3MDAnO1xuQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU5vdG8rU2Fuczo0MDAsNzAwJztcbkBpbXBvcnQgJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1VYnVudHUrQ29uZGVuc2VkJztcbkBpbXBvcnQgJ2h0dHBzOi8vZmlsZS5teWZvbnRhc3RpYy5jb20vRE5adVJxWnpEV0NBZkx3UFYzNlc1RS9pY29ucy5jc3MnO1xuQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCc7XG5AaW1wb3J0ICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um9ib3RvK0NvbmRlbnNlZDozMDAsNDAwLDcwMCc7XG5AaW1wb3J0ICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Tm90bytTYW5zOjQwMCw3MDAnO1xuQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVVidW50dStDb25kZW5zZWQnO1xuLnNsaWRlc2pzLXBhZ2luYXRpb24sIC5tYWluLW1lbnUge1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBwYWRkaW5nLWxlZnQ6IDA7XG4gIG1hcmdpbjogMDsgfVxuXG4vKipcclxuICBFRGdyaWQgZXMgdW5hIGxpYnJlcsOtYSBDU1MgcGFyYSBjb25zdHJ1aXIgbGF5b3V0cyBjb24gUmVzcG9uc2l2ZSBXZWIgRGVzaWduXHJcbiAgSW1wb3J0ZSBlc3RlIGFyY2hpdm8gZW4gc3UgcHJveWVjdG8gcGFyYSBlbXBlemFyIGEgdXNhcmxvXHJcbioqL1xuKixcbio6YmVmb3JlLFxuKjphZnRlciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cblxuYm9keSB7XG4gIG1hcmdpbjogMDtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7IH1cblxuaW1nIHtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IGF1dG87IH1cblxuYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuICBhOmhvdmVyIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cblxuLmVkLWNvbnRhaW5lciwgLnJlc3VtZV9fY29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBtYXgtd2lkdGg6IDEyMDBweDtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbiAgd2lkdGg6IDg1JTsgfVxuXG4uZWQtaXRlbSwgLnNsaWRlcywgLnJlc3VtZV9faGlzdG9yeSwgLnJlc3VtZV9fc2tpbGxzIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nLWxlZnQ6IDFlbTtcbiAgcGFkZGluZy1yaWdodDogMWVtOyB9XG5cbi5lZC1pdGVtIHtcbiAgd2lkdGg6IDEwMCU7IH1cbiAgLmVkLWl0ZW0uZWQtY29udGFpbmVyIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgcGFkZGluZy1yaWdodDogMDsgfVxuXG4uZmFuY3lib3gtd3JhcCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50O1xuICB6LWluZGV4OiAxMTAwICFpbXBvcnRhbnQ7IH1cblxuLmZhbmN5Ym94LW92ZXJsYXkge1xuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNzUpO1xuICB6LWluZGV4OiAxMDAwOyB9XG5cbi5zbGlkZXMge1xuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogbm9uZTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB6LWluZGV4OiAxOyB9XG4gIC5zbGlkZXMgYTpob3ZlciB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XG4gIC5zbGlkZXMgaW1nIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IGF1dG87IH1cblxuLnNsaWRlc2pzLW5hdmlnYXRpb24ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gIGhlaWdodDogNTBweDtcbiAgd2lkdGg6IDUwcHg7XG4gIGxpbmUtaGVpZ2h0OiA1MHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC41KTtcbiAgY29sb3I6ICNmZmY7XG4gIGZvbnQtc2l6ZTogMS41ZW07XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgdGV4dC1zaGFkb3c6IDJweCAycHggIzA3MEQxMixcciAxcHggMXB4ICMwNzBEMTIsXHIgMnB4IDJweCAjMDcwRDEyO1xuICBvcGFjaXR5OiAuNTtcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3M7XG4gIHotaW5kZXg6IDIwMDA7IH1cbiAgLnNsaWRlc2pzLW5hdmlnYXRpb246aG92ZXIge1xuICAgIG9wYWNpdHk6IDE7IH1cbiAgLnNsaWRlc2pzLW5hdmlnYXRpb246OmJlZm9yZSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogM3B4ICFpbXBvcnRhbnQ7IH1cblxuLnNsaWRlc2pzLXByZXZpb3VzIHtcbiAgbGVmdDogMWVtOyB9XG4gIC5zbGlkZXNqcy1wcmV2aW91czo6YmVmb3JlIHtcbiAgICBsZWZ0OiAtM3B4OyB9XG5cbi5zbGlkZXNqcy1uZXh0IHtcbiAgcmlnaHQ6IDFlbTsgfVxuICAuc2xpZGVzanMtbmV4dDo6YmVmb3JlIHtcbiAgICBsZWZ0OiAycHg7IH1cblxuLnNsaWRlc2pzLXBhZ2luYXRpb24ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHotaW5kZXg6IDEwMDA7XG4gIGJvdHRvbTogMWVtO1xuICBkaXNwbGF5OiBmbGV4O1xuICByaWdodDogMmVtOyB9XG4gIC5zbGlkZXNqcy1wYWdpbmF0aW9uIGEge1xuICAgIG1hcmdpbjogMCAuNWVtO1xuICAgIGNvbG9yOiAjRkZGRkZGO1xuICAgIHRleHQtc2hhZG93OiAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC41KSxcciAxcHggMXB4IHJnYmEoMCwgMCwgMCwgMC41KTsgfVxuICAgIC5zbGlkZXNqcy1wYWdpbmF0aW9uIGE6OmJlZm9yZSB7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB0b3A6IDAgIWltcG9ydGFudDsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MzlweCkge1xuICAgIC5zbGlkZXNqcy1wYWdpbmF0aW9uIHtcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC44KTsgfSB9XG5cbmJvZHkge1xuICBiYWNrZ3JvdW5kOiAjRkRGREZEO1xuICBmb250LWZhbWlseTogXCJVYnVudHUgQ29uZGVuc2VkXCIsIHNhbnMtc2VyaWY7XG4gIGNvbG9yOiAjNDQ0O1xuICBoZWlnaHQ6IDEwMHZoO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyB9XG5cbmEge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XG5cbnAsIGJsb2NrcXVvdGUsIGxpIHtcbiAgZm9udC1zaXplOiAxZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjU7IH1cblxucCB7XG4gIG1hcmdpbjogMCAwIDFlbSAwOyB9XG4gIHA6bGFzdC1jaGlsZCwgcDpvbmx5LWNoaWxkIHtcbiAgICBtYXJnaW46IDA7IH1cblxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gIGZvbnQtZmFtaWx5OiBcIk5vdG8gU2Fuc1wiLCBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogNzAwO1xuICB0ZXh0LXRyYW5zZm9ybTogbm9ybWFsO1xuICBjb2xvcjogIzJiMmIyYjtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgbWFyZ2luOiAwO1xuICB3aWR0aDogMTAwJTsgfVxuXG5oMSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xuICBsaW5lLWhlaWdodDogMS4yOyB9XG5cbmgyIHtcbiAgZm9udC1zaXplOiAxLjZlbTsgfVxuXG5oMyB7XG4gIGZvbnQtc2l6ZTogMS4zZW07IH1cblxuaDQge1xuICBmb250LXNpemU6IDFlbTsgfVxuXG5oNSB7XG4gIGZvbnQtc2l6ZTogMC45ZW07IH1cblxuaDYge1xuICBmb250LXNpemU6IDAuOGVtOyB9XG5cbnNlY3Rpb24ge1xuICB3aWR0aDogY2FsYygxMDB2dyAtIDE2MHB4KTtcbiAgaGVpZ2h0OiAxMDB2aDtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgcGFkZGluZy10b3A6IDYwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcbiAgICBzZWN0aW9uIHtcbiAgICAgIHdpZHRoOiAxMDB2dztcbiAgICAgIGxlZnQ6IDE2MHB4OyB9IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XG4gICAgc2VjdGlvbiB7XG4gICAgICB3aWR0aDogMTAwdnc7XG4gICAgICBsZWZ0OiAxNjBweDsgfSB9XG5cbi5tYWluLW5hdiB7XG4gIGhlaWdodDogY2FsYygxMDB2aCAtIDE2MHB4IC0gNWVtKTtcbiAgbWF4LWhlaWdodDogNjAwcHg7IH1cblxuLm1haW4tbWVudSB7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgfVxuICAubWFpbi1tZW51IGxpIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZmxleDogYXV0bztcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgyNTMsIDI1MywgMjUzLCAwLjEpO1xuICAgIGhlaWdodDogYXV0bzsgfVxuICAubWFpbi1tZW51IGEge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcztcbiAgICBmb250LXNpemU6IC43NWVtO1xuICAgIGNvbG9yOiByZ2JhKDI1MywgMjUzLCAyNTMsIDAuMyk7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsgfVxuICAgIC5tYWluLW1lbnUgYSBzcGFuIHtcbiAgICAgIGZvbnQtc2l6ZTogMmVtOyB9XG4gICAgLm1haW4tbWVudSBhOmhvdmVyLCAubWFpbi1tZW51IGEuc2VsZWN0ZWQge1xuICAgICAgY29sb3I6IHJnYmEoMjUzLCAyNTMsIDI1MywgMC43NSk7IH1cblxuLm1haW4taGVhZGVyIHtcbiAgd2lkdGg6IDE2MHB4O1xuICBoZWlnaHQ6IDEwMHZoO1xuICBiYWNrZ3JvdW5kOiAjMUMyNjJCO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIHotaW5kZXg6IDkwO1xuICB0b3A6IDA7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gICAgLm1haW4taGVhZGVyIHtcbiAgICAgIGxlZnQ6IDA7IH0gfVxuXG4udG9wX190aXRsZSB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgei1pbmRleDogMTAwO1xuICBjb2xvcjogI0ZERkRGRDsgfVxuICAudG9wX190aXRsZSBoMSB7XG4gICAgY29sb3I6IGluaGVyaXQ7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XG4gICAgLnRvcF9fdGl0bGUge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBiYWNrZ3JvdW5kOiAjMDcwRDEyO1xuICAgICAgbGVmdDogMDtcbiAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGhlaWdodDogM3JlbTsgfVxuICAgICAgLnRvcF9fdGl0bGUgYSB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB3aWR0aDogNC41cmVtO1xuICAgICAgICBsaW5lLWhlaWdodDogM3JlbTtcbiAgICAgICAgZm9udC1zaXplOiAxLjVlbTtcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgcmdiYSgyNTMsIDI1MywgMjUzLCAwLjIpO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7IH1cbiAgICAgIC50b3BfX3RpdGxlIGgxIHtcbiAgICAgICAgZm9udC1zaXplOiAxLjVlbTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDNyZW07XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIHBhZGRpbmctbGVmdDogMWVtOyB9IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gICAgLnRvcF9fdGl0bGUge1xuICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgbGVmdDogMDtcbiAgICAgIGJhY2tncm91bmQ6ICM4QUNCODI7XG4gICAgICBoZWlnaHQ6IDIuMjVyZW07XG4gICAgICB0b3A6IGNhbGMoMTYwcHggLSAxZW0pOyB9XG4gICAgICAudG9wX190aXRsZSBhIHtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICBkaXNwbGF5OiBub25lOyB9XG4gICAgICAudG9wX190aXRsZSBoMSB7XG4gICAgICAgIHdpZHRoOiAxNjBweDtcbiAgICAgICAgZm9udC1zaXplOiAxZW07XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDIuMjVyZW07XG4gICAgICAgIGhlaWdodDogMi4yNXJlbTsgfSB9XG5cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xuICAuYWN0aXZlID4gLnRvcF9fdGl0bGUge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAxNjBweCk7XG4gICAgbGVmdDogMTYwcHg7IH0gfVxuXG4udG9wIHtcbiAgYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KCM3NzcgMSUsICMzMzMpO1xuICBwYWRkaW5nOiAuNWVtIDA7IH1cbiAgLnRvcCBpbWcge1xuICAgIGRpc3BsYXk6IGJsb2NrOyB9XG5cbi5ib3R0b20ge1xuICBtYXJnaW4tdG9wOiBhdXRvO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiByZ2JhKDI1MywgMjUzLCAyNTMsIDAuMik7XG4gIGZvbnQtc2l6ZTogLjhlbTsgfVxuICAuYm90dG9tIHNwYW4ge1xuICAgIG1hcmdpbi1sZWZ0OiAzcHg7IH1cblxuLmhvbWUge1xuICBiYWNrZ3JvdW5kOiB1cmwoLi4vaW1nL2JnLmpwZykgY2VudGVyIGNlbnRlci9jb3ZlciBuby1yZXBlYXQ7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7IH1cbiAgLmhvbWU6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjgsIDM4LCA0MywgMC43NSk7IH1cbiAgLmhvbWVfX21lc3NhZ2Uge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB6LWluZGV4OiA1MDtcbiAgICBtYXJnaW4tYm90dG9tOiA1ZW07XG4gICAgY29sb3I6ICNGREZERkQ7IH1cbiAgLmhvbWVfX3NwYW4sIC5ob21lX19wcm8ge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBmb250LXNpemU6IDEuM2VtO1xuICAgIGNvbG9yOiBpbmhlcml0OyB9XG4gIC5ob21lX19uYW1lIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAzZW07XG4gICAgbWFyZ2luOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgIGNvbG9yOiBpbmhlcml0OyB9XG4gIC5ob21lX19wcm8ge1xuICAgIHBhZGRpbmctdG9wOiAxZW07IH1cblxuYm9keSB7XG4gIGJhY2tncm91bmQ6ICNFQkYwREY7IH1cblxuLnJlc3VtZSB7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIHBhZGRpbmctYm90dG9tOiAzZW07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuICAucmVzdW1lX19jb250YWluZXIge1xuICAgIG1hcmdpbi10b3A6IDNlbTsgfVxuICAucmVzdW1lX19oaXN0b3J5LCAucmVzdW1lX19za2lsbHMge1xuICAgIHdpZHRoOiAxMDAlOyB9XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjQwcHgpIHtcbiAgICAgIC5yZXN1bWVfX2hpc3RvcnksIC5yZXN1bWVfX3NraWxscyB7XG4gICAgICAgIHdpZHRoOiA1MCU7IH0gfVxuICAucmVzdW1lX19oaXN0b3J5IHtcbiAgICBwYWRkaW5nLWxlZnQ6IDIuNWVtO1xuICAgIG1hcmdpbi10b3A6IDJlbTtcbiAgICBib3JkZXItbGVmdDogM3B4IHNvbGlkICNGREZERkQ7IH1cbiAgICAucmVzdW1lX19oaXN0b3J5OmZpcnN0LWNoaWxkIHtcbiAgICAgIG1hcmdpbi10b3A6IDA7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjM5cHgpIHtcbiAgICAucmVzdW1lX19za2lsbHMge1xuICAgICAgbWFyZ2luLXRvcDogMmVtOyB9IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gICAgLnJlc3VtZV9fc2tpbGxzIHtcbiAgICAgIG1hcmdpbi10b3A6IC0uNWVtOyB9IH1cbiAgLnJlc3VtZV9fc2tpbGxzX190aXRsZSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGNvbG9yOiAjRkRGREZEO1xuICAgIGJhY2tncm91bmQ6ICM4QUNCODI7XG4gICAgd2lkdGg6IDc1JTtcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBoZWlnaHQ6IDMwcHg7XG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgZm9udC1zaXplOiAxZW07XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cbiAgICAucmVzdW1lX19za2lsbHNfX3RpdGxlOjpiZWZvcmUsIC5yZXN1bWVfX3NraWxsc19fdGl0bGU6OmFmdGVyIHtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB3aWR0aDogMzBweDtcbiAgICAgIGJhY2tncm91bmQ6ICM1N2I1NGM7XG4gICAgICB6LWluZGV4OiAtMSAhaW1wb3J0YW50O1xuICAgICAgYm9yZGVyOiA1cHggc29saWQgdHJhbnNwYXJlbnQ7IH1cbiAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAgICAgICAucmVzdW1lX19za2lsbHNfX3RpdGxlOjpiZWZvcmUsIC5yZXN1bWVfX3NraWxsc19fdGl0bGU6OmFmdGVyIHtcbiAgICAgICAgICB6LWluZGV4OiAtMTsgfSB9XG4gICAgLnJlc3VtZV9fc2tpbGxzX190aXRsZTo6YmVmb3JlIHtcbiAgICAgIGxlZnQ6IGNhbGMoKDMwcHggLSA1cHgpICogLTEpO1xuICAgICAgdG9wOiAtNXB4O1xuICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAjM2Q3ZjM1O1xuICAgICAgYm9yZGVyLXJhZGl1czogM3B4IDAgMCAzcHg7IH1cbiAgICAucmVzdW1lX19za2lsbHNfX3RpdGxlOjphZnRlciB7XG4gICAgICByaWdodDogY2FsYygoMzBweCAtIDVweCkgKiAtMSk7XG4gICAgICBib3R0b206IC01cHg7XG4gICAgICBib3JkZXItbGVmdC1jb2xvcjogIzNkN2YzNTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDAgM3B4IDNweCAwOyB9XG4gIC5yZXN1bWVfX3RpdGxlIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgbWFyZ2luLXRvcDogMmVtOyB9XG4gICAgLnJlc3VtZV9fdGl0bGU6bnRoLW9mLXR5cGUoMSkge1xuICAgICAgbWFyZ2luLXRvcDogMDsgfVxuICAgIC5yZXN1bWVfX3RpdGxlID4gc3BhbiwgLnJlc3VtZV9fdGl0bGUgPiBoMyB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cbiAgICAucmVzdW1lX190aXRsZSA+IHNwYW4ge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgbGVmdDogLTNyZW07XG4gICAgICB3aWR0aDogM3JlbTtcbiAgICAgIGhlaWdodDogM3JlbTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAzcmVtO1xuICAgICAgYmFja2dyb3VuZDogIzhBQ0I4MjtcbiAgICAgIGNvbG9yOiAjRkRGREZEO1xuICAgICAgZm9udC1zaXplOiAxLjVlbTtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC0zNSUsIC0yNSUpO1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlOyB9XG4gICAgLnJlc3VtZV9fdGl0bGUgPiBoMyB7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOyB9XG4gIC5yZXN1bWVfX2NvbnRlbnQge1xuICAgIG1hcmdpbi10b3A6IDJlbTsgfVxuICAgIC5yZXN1bWVfX2NvbnRlbnQgaDQge1xuICAgICAgZm9udC1zaXplOiAxZW07XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOyB9XG4gICAgLnJlc3VtZV9fY29udGVudCBoNSB7XG4gICAgICBjb2xvcjogcmdiYSgyOCwgMzgsIDQzLCAwLjQ1KTtcbiAgICAgIG1hcmdpbjogLjVlbSAwIDFlbTsgfVxuXG4uZGF0ZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogMS41ZW07IH1cbiAgLmRhdGUgcCB7XG4gICAgYmFja2dyb3VuZDogIzhBQ0I4MjtcbiAgICBkaXNwbGF5OiB0YWJsZTtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBwYWRkaW5nOiAwIDFlbTtcbiAgICBjb2xvcjogI0ZERkRGRDtcbiAgICBmb250LXNpemU6IC45ZW07IH1cbiAgICAuZGF0ZSBwOmJlZm9yZSwgLmRhdGUgcDo6YWZ0ZXIge1xuICAgICAgY29udGVudDogJyc7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7IH1cbiAgICAuZGF0ZSBwOmJlZm9yZSB7XG4gICAgICB3aWR0aDogMTVweDtcbiAgICAgIGhlaWdodDogMTVweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgIGJhY2tncm91bmQ6ICNGREZERkQ7XG4gICAgICBsZWZ0OiAtM3JlbTtcbiAgICAgIHRvcDogNTAlO1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOyB9XG4gICAgLmRhdGUgcDo6YWZ0ZXIge1xuICAgICAgbGVmdDogLTEwcHg7XG4gICAgICB0b3A6IDA7XG4gICAgICB3aWR0aDogMDtcbiAgICAgIGhlaWdodDogMDtcbiAgICAgIGJvcmRlcjogMTBweCBzb2xpZCAjOEFDQjgyO1xuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IHRyYW5zcGFyZW50OyB9XG4gIC5kYXRlLmdyZWVuIHA6OmJlZm9yZSB7XG4gICAgYmFja2dyb3VuZDogIzhBQ0I4MiAhaW1wb3J0YW50OyB9XG5cbltjbGFzc149XCJpY29uLVwiXTo6YmVmb3JlIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB0b3A6IDNweDsgfVxuXG5ib2R5IHtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAxMDB2dztcbiAgaGVpZ2h0OiAxMDB2aDsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcbiAgICBib2R5IHtcbiAgICAgIGxlZnQ6IC0xNjBweDtcbiAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzOyB9IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gICAgYm9keSB7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDE2MHB4OyB9IH1cbiAgYm9keS5hY3RpdmUge1xuICAgIGxlZnQ6IDA7IH1cblxuLnRpdGxlX3BhZ2Uge1xuICBkaXNwbGF5OiBibG9jaztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBmb250LXNpemU6IDJlbTsgfVxuICAudGl0bGVfcGFnZSBzcGFuIHtcbiAgICBmb250LXNpemU6IDJlbTsgfVxuIiwiLy8gaWNvbi1mb250c1xyXG5AaW1wb3J0ICdodHRwczovL2ZpbGUubXlmb250YXN0aWMuY29tL0ROWnVScVp6RFdDQWZMd1BWMzZXNUUvaWNvbnMuY3NzJztcclxuXHJcbi8vVGlwbyBkZSBmdWVudGVzIGdlbmVyYWxlcyAqKiBkZXNhY3RpdmUgbGFzIHF1ZSBubyAgbmVjZXNpdGUgcGFyYSBtYXlvciBkZW5kaW1pZW50b1xyXG4vL0BpbXBvcnQgJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1PcGVuK1NhbnM6MzAwLDQwMCw3MDAnO1xyXG4kb3Blbi1zYW5zOidPcGVuIFNhbnMnLCBzYW5zLXNlcmlmO1xyXG4vLy8vXHJcbkBpbXBvcnQgJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Pc3dhbGQ6MzAwLDQwMCw3MDAnO1xyXG4kb3N3YWxkIDogJ09zd2FsZCcsIHNhbnMtc2VyaWY7XHJcbi8vXHJcbi8vQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU1vbnRzZXJyYXQ6NDAwLDcwMCc7XHJcbi8vJG1vbnRzZXJyYXQgOiAnTW9udHNlcnJhdCcsIHNhbnMtc2VyaWY7XHJcbi8vXHJcbi8vQGltcG9ydCAnaHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9TnVuaXRvOjQwMCwzMDAsNzAwLDgwMCc7XHJcbi8vJG51bml0byA6ICdOdW5pdG8nLCBhcmlhbDtcclxuXHJcbi8vQGltcG9ydCAnaHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9VGl0aWxsaXVtK1dlYjo0MDAsNzAwaXRhbGljLDcwMCw2MDBpdGFsaWMsNDAwaXRhbGljJztcclxuLy8kdGl0aWxsaXVtOiAnVGl0aWxsaXVtJywgYXJpYWw7XHJcblxyXG5cclxuLy9AaW1wb3J0ICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9T3JiaXRyb246NDAwLDUwMCw3MDAsOTAwJztcclxuLy8kb3JiaXRyb246ICdPcmJpdHJvbicsIGFyaWFsO1xyXG4vL1xyXG5AaW1wb3J0ICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um9ib3RvK0NvbmRlbnNlZDozMDAsNDAwLDcwMCc7XHJcbiRyb2JvdG8tY29uZGVuc2VkIDogJ1JvYm90byBDb25kZW5zZWQnLCBzYW5zLXNlcmlmO1xyXG4vL1xyXG4vL0BpbXBvcnQgJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1VYnVudHU6MzAwLDQwMCw3MDAnO1xyXG4vLyR1YnVudHUgOiAnVWJ1bnR1Jywgc2Fucy1zZXJpZjtcclxuLy9cclxuQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU5vdG8rU2Fuczo0MDAsNzAwJztcclxuJG5vdG8gOiAnTm90byBTYW5zJywgc2Fucy1zZXJpZjtcclxuXHJcbkBpbXBvcnQgJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1VYnVudHUrQ29uZGVuc2VkJztcclxuJHVidW50dS1jb25kZW5zZWQ6ICdVYnVudHUgQ29uZGVuc2VkJywgc2Fucy1zZXJpZjtcclxuXHJcbi8vQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUpvc2VmaW4rU2Fuczo0MDAsNzAwJztcclxuLy8kam9zZWZpbi1zYW5zOiAnSm9zZWZpbiBTYW5zJywgc2Fucy1zZXJpZjtcclxuLy9cclxuLy9AaW1wb3J0ICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9VmFyZWxhK1JvdW5kJztcclxuLy8kdmFyZWxhOiAnVmFyZWxhIFJvdW5kJywgc2Fucy1zZXJpZjtcclxuXHJcbiRtYWluLWZvbnQgICA6ICR1YnVudHUtY29uZGVuc2VkO1xyXG4vLyRzZWNvbmQtZm9udDogJHVidW50dS1jb25kZW5zZWQ7XHJcbiRoZWFkZXItZm9udCA6ICRub3RvO1xyXG5cclxuJGxpZ2h0ICAgICAgOiAzMDA7XHJcbiRub3JtYWwgICAgIDogNDAwO1xyXG4kYm9sZCAgICAgICA6IDcwMDtcclxuXHJcbi8vQGZvbnQtZmFjZSB7XHJcbi8vICBmb250LWZhbWlseTogJ0ZvbnRBd2Vzb21lJztcclxuLy8gIHNyYzogdXJsKCcuLi9mb250cy9mb250YXdlc29tZS13ZWJmb250LmVvdD92PTQuNi4zJyk7XHJcbi8vICBzcmM6IHVybCgnLi4vZm9udHMvZm9udGF3ZXNvbWUtd2ViZm9udC5lb3Q/I2llZml4JnY9NC42LjMnKSBmb3JtYXQoJ2VtYmVkZGVkLW9wZW50eXBlJyksIHVybCgnLi4vZm9udHMvZm9udGF3ZXNvbWUtd2ViZm9udC53b2ZmMj92PTQuNi4zJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJy4uL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQud29mZj92PTQuNi4zJykgZm9ybWF0KCd3b2ZmJyksIHVybCgnLi4vZm9udHMvZm9udGF3ZXNvbWUtd2ViZm9udC50dGY/dj00LjYuMycpIGZvcm1hdCgndHJ1ZXR5cGUnKSwgdXJsKCcuLi9mb250cy9mb250YXdlc29tZS13ZWJmb250LnN2Zz92PTQuNi4zI2ZvbnRhd2Vzb21lcmVndWxhcicpIGZvcm1hdCgnc3ZnJyk7XHJcbi8vICBmb250LXdlaWdodDogbm9ybWFsO1xyXG4vLyAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG4vL31cclxuLy8uZmEge1xyXG4vLyAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4vLyAgZm9udDogbm9ybWFsIG5vcm1hbCBub3JtYWwgMTRweC8xIEZvbnRBd2Vzb21lO1xyXG4vLyAgZm9udC1zaXplOiBpbmhlcml0O1xyXG4vLyAgdGV4dC1yZW5kZXJpbmc6IGF1dG87XHJcbi8vICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcclxuLy8gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XHJcbi8vfVxyXG4vLy5mYS1zcGluIHtcclxuLy8gIC13ZWJraXQtYW5pbWF0aW9uOiBmYS1zcGluIDJzIGluZmluaXRlIGxpbmVhcjtcclxuLy8gIGFuaW1hdGlvbjogZmEtc3BpbiAycyBpbmZpbml0ZSBsaW5lYXI7XHJcbi8vfVxyXG4vLy5mYS1wdWxzZSB7XHJcbi8vICAtd2Via2l0LWFuaW1hdGlvbjogZmEtc3BpbiAxcyBpbmZpbml0ZSBzdGVwcyg4KTtcclxuLy8gIGFuaW1hdGlvbjogZmEtc3BpbiAxcyBpbmZpbml0ZSBzdGVwcyg4KTtcclxuLy99XHJcbi8vQC13ZWJraXQta2V5ZnJhbWVzIGZhLXNwaW4ge1xyXG4vLyAgMCUge1xyXG4vLyAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4vLyAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuLy8gIH1cclxuLy8gIDEwMCUge1xyXG4vLyAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM1OWRlZyk7XHJcbi8vICAgIHRyYW5zZm9ybTogcm90YXRlKDM1OWRlZyk7XHJcbi8vICB9XHJcbi8vfVxyXG4vL0BrZXlmcmFtZXMgZmEtc3BpbiB7XHJcbi8vICAwJSB7XHJcbi8vICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbi8vICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4vLyAgfVxyXG4vLyAgMTAwJSB7XHJcbi8vICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTtcclxuLy8gICAgdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTtcclxuLy8gIH1cclxuLy99XHJcbi8vLmZhLXNwaW5uZXI6YmVmb3JlIHtcclxuLy8gIGNvbnRlbnQ6IFwiXFxmMTEwXCI7XHJcbi8vfVxyXG4iLCIlbGlzdC1zdHlsZXtcclxuICBsaXN0LXN0eWxlOiBub25lO1xyXG4gIHBhZGRpbmctbGVmdDogMDtcclxuICBtYXJnaW46IDA7XHJcbn1cclxuIiwiLyoqXHJcbiAgRURncmlkIGVzIHVuYSBsaWJyZXLDrWEgQ1NTIHBhcmEgY29uc3RydWlyIGxheW91dHMgY29uIFJlc3BvbnNpdmUgV2ViIERlc2lnblxyXG4gIEltcG9ydGUgZXN0ZSBhcmNoaXZvIGVuIHN1IHByb3llY3RvIHBhcmEgZW1wZXphciBhIHVzYXJsb1xyXG4qKi9cclxuXHJcbi8vRnVuY2lvbmVzIHBhcmEgY29udmVydGlyIHB4IGEgZW0geSByZW1cclxuQGltcG9ydCBcImNvbXBvbmVudHMvZnVuY3Rpb25zXCI7XHJcblxyXG4vLyBWYXJpYWJsZXMgZ2xvYmFsZXMgKHB1ZWRlIHNvYnJlZXNjcmliaXJsYXMgYW50ZXMgZGUgaW1wb3J0YXIgRUQgZ3JpZClcclxuLy8gTm8gbGFzIHNvYnJlZXNjcmliYSBhcXXDrSwgc2lubyBkZXNkZSBzdSBwcm95ZWN0by5cclxuICAkY3NzQ29yZSAgICA6IHRydWUgICFkZWZhdWx0O1xyXG4gICRjc3NIZWxwZXJzIDogdHJ1ZSAgIWRlZmF1bHQ7XHJcbiAgJGRldk1vZGUgICAgOiBmYWxzZSAhZGVmYXVsdDtcclxuXHJcbi8vIFNlbGVjdG9yZXMgKGNsYXNlcykgcGFyYSBmbGV4LWNvbnRhaW5lciB5IGZsZXgtaXRlbVxyXG4gICRjb250YWluZXIgOiBlZC1jb250YWluZXIgIWRlZmF1bHQ7XHJcbiAgJGl0ZW0gICAgICA6IGVkLWl0ZW0gIWRlZmF1bHQ7XHJcblxyXG4vLyBBbmNobyBtw6F4aW1vIHBhcmEgbG9zIGNvbnRlbmVkb3Jlc1xyXG4gICRtYXgtd2lkdGggOiAxMjAwcHggIWRlZmF1bHQ7XHJcblxyXG4vLyBTZXBlcmFjacOzbiBob3Jpem9udGFsIGVudHJlIGl0ZW1zICgqMilcclxuICAkZ3V0dGVyIDogZW0oMTVweCkgIWRlZmF1bHQ7XHJcblxyXG4vLyBCcmVha3BvaW50c1xyXG4gICRicmVha3BvaW50cyA6IChcclxuICAgIHMgIDogMCxcclxuICAgIG0gIDogNjQwcHgsXHJcbiAgICBsICA6IDEwMjRweCxcclxuICAgIHhsIDogMTQ0MHB4XHJcbiAgKSAhZGVmYXVsdDtcclxuXHJcbi8vIEZyYWNjaW9uZXMgcGFyYSBjYWxjdWxhciBhbmNob3MgZGUgbG9zIGl0ZW1zXHJcbiAgJGZyYWN0aW9ucyA6IDMgNiAhZGVmYXVsdDtcclxuXHJcbi8vIEltcG9ydGFyIGNvbXBvbmVudGVzXHJcbkBpbXBvcnQgXCJjb21wb25lbnRzL2Jhc2VcIjsgICAgICAgICAgICAvLyBlc3RpbG9zIGJhc2VcclxuQGltcG9ydCBcImNvbXBvbmVudHMvbWVkaWEtcXVlcmllc1wiOyAgIC8vIG1peGlucyBmcm9tKCksIHRvKCksIGZyb21UbygpXHJcbkBpbXBvcnQgXCJjb21wb25lbnRzL2hlbHBlcnNcIjsgICAgICAgICAvLyB1dGlsaWRhZGVzXHJcbkBpbXBvcnQgXCJjb21wb25lbnRzL2RldlwiOyAgICAgICAgICAgICAvLyBtb2RvIGRldlxyXG5AaW1wb3J0IFwiY29tcG9uZW50cy9jb3JlXCI7ICAgICAgICAgICAgLy8gY29yZSBkZSBFRGdyaWQgKGNvbnRhaW5lcnMgeSBpdGVtcylcclxuQGltcG9ydCBcImNvbXBvbmVudHMvZ3JpZFwiOyAgICAgICAgICAgIC8vIG1peGluIGdyaWQoKVxyXG5AaW1wb3J0IFwiY29tcG9uZW50cy92aXNpYmlsaXR5XCI7ICAgICAgLy8gbWl4aW5zIHBhcmEgdmlzaWJpbGlkYWRcclxuQGltcG9ydCBcImNvbXBvbmVudHMvdmlkZW9cIjsgICAgICAgICAgIC8vIHZpZGVvIFJXRFxyXG5AaW1wb3J0IFwiY29tcG9uZW50cy9lZC1tZW51XCI7ICAgICAgICAgLy8gZXN0aWxvcyBwYXJhIG1lbnVzXHJcbkBpbXBvcnQgXCJjb21wb25lbnRzL2ZsZXhib3hcIjsgICAgICAgICAvLyB1dGlsaWRhZGVzIGNvbiBmbGV4Ym94XHJcbkBpbXBvcnQgXCJjb21wb25lbnRzL29mZnNldFwiOyAgICAgICAgICAvLyBvZmZzZXRzXHJcbkBpbXBvcnQgXCJjb21wb25lbnRzL2J1dHRvbnNcIjsgICAgICAgICAvLyBtaXhpbiBidXR0b24oKVxyXG5AaW1wb3J0IFwiY29tcG9uZW50cy9jc3MtY29yZVwiOyAgICAgICAgLy8gY29tcG9uZW50ZXMgcXVlIHNlIGNvbXBpbGFyYW4gcG9yIGRlZmF1bHQgYSBjc3NcclxuQGltcG9ydCBcImNvbXBvbmVudHMvY3NzLWhlbHBlcnNcIjsgICAgIC8vIGF5dWRhcyBlbiBjc3MgKHBvciBtZWRpbyBkZSBjbGFzZXMpXHJcbiIsIi8vIFJXRCBCYXNlc1xyXG4qLFxyXG4qOmJlZm9yZSxcclxuKjphZnRlciB7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxufVxyXG5cclxuYm9keSB7XHJcbiAgbWFyZ2luICAgICAgOiAwO1xyXG4gIGZvbnQtZmFtaWx5IDogc2Fucy1zZXJpZjtcclxufVxyXG5cclxuLy8gSW3DoWdlbmVzIHJlc3BvbnNpdmVcclxuaW1nIHtcclxuICBtYXgtd2lkdGggOiAxMDAlO1xyXG4gIGhlaWdodCAgICA6IGF1dG87XHJcbn1cclxuXHJcbmEge1xyXG4gIHRleHQtZGVjb3JhdGlvbiA6IG5vbmU7XHJcblxyXG4gICY6aG92ZXIgeyB0ZXh0LWRlY29yYXRpb24gOiBub25lIH1cclxufVxyXG4iLCIvLyBwbGFjZWhvbGRlciBwYXJhIGVkLWNvbnRhaW5lclxyXG4lZWQtY29udGFpbmVyIHtcclxuICBkaXNwbGF5ICAgICAgOiBmbGV4O1xyXG4gIGZsZXgtd3JhcCAgICA6IHdyYXA7XHJcbiAgbWF4LXdpZHRoICAgIDogJG1heC13aWR0aDtcclxuICBtYXJnaW4tbGVmdCAgOiBhdXRvO1xyXG4gIG1hcmdpbi1yaWdodCA6IGF1dG87XHJcbiAgd2lkdGggICAgICAgIDogODUlO1xyXG59XHJcblxyXG4vLyBwbGFjZWhvbGRlciBwYXJhIGVkLWl0ZW1cclxuJWVkLWl0ZW0ge1xyXG4gIG1hcmdpbiAgICAgICAgOiAwO1xyXG4gIHBhZGRpbmctbGVmdCAgOiAkZ3V0dGVyO1xyXG4gIHBhZGRpbmctcmlnaHQgOiAkZ3V0dGVyO1xyXG59XHJcblxyXG4vLyBtaXhpbiBwYXJhIGNyZWFyIGVkLWNvbnRhaW5lclxyXG5AbWl4aW4gZWRDb250YWluZXIge1xyXG4gIEBleHRlbmQgJWVkLWNvbnRhaW5lcjtcclxuXHJcbiAgQGlmICRkZXZNb2RlID09IHRydWUge1xyXG4gICAgQGluY2x1ZGUgZGV2TW9kZUNvbnRhaW5lcigpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gbWl4aW4gcGFyYSBlZC1jb250YWluZXIgdG90YWxcclxuQG1peGluIGZ1bGwge1xyXG4gIG1heC13aWR0aCA6IDEwMCU7XHJcbn1cclxuXHJcbi8vIE1peGluIHBhcmEgY2FsY3VsYXIgZWwgYW5jaG8gZGUgdW4gZWQtaXRlbVxyXG5AbWl4aW4gZWRJdGVtV2lkdGgoJGN1cnJlbnRCcCwgJHByZXZCcCwgJGNvcmVCcCl7XHJcbiAgLy8gU2kgZWwgdGFtYcOxbyBhY3R1YWwgZXMgZGlmZXJlbnRlIGFsIHByZXZpb1xyXG4gIC8vIGFzaWduYXLDoSBlbCBhbmNobyBlbiBwb3JjZW50YWplXHJcbiAgQGlmICRjdXJyZW50QnAgIT0gJHByZXZCcHtcclxuICAgIEBpZiAkY3VycmVudEJwIDwgMSB7XHJcbiAgICAgIEBpbmNsdWRlIGZyb20oJGNvcmVCcCl7XHJcbiAgICAgICAgd2lkdGggOiAkY3VycmVudEJwICogMTAwJTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgQGVsc2Uge1xyXG4gICAgICBAaW5jbHVkZSBmcm9tKCRjb3JlQnApe1xyXG4gICAgICAgIHdpZHRoIDogJGN1cnJlbnRCcCAqIDElO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBtaXhpbiBwYXJhIGNyZWFyIHVuIGVkLWl0ZW1cclxuQG1peGluIGVkSXRlbSgkczoxMDAsJG06JHMsJGw6JG0sJHhsOiRsKSB7XHJcbiAgQGV4dGVuZCAlZWQtaXRlbTtcclxuXHJcbiAgQGlmICRkZXZNb2RlID09IHRydWUge1xyXG4gICAgQGluY2x1ZGUgZGV2TW9kZUl0ZW0oKTtcclxuICB9XHJcblxyXG4gIC8vIGNhbGN1bGFyIGVsIGFuY2hvIHBhcmEgZWwgcHJpbWVyIGJyZWFrcG9pbnRcclxuICAvLyBwb3IgZGVmZWN0byBlcyAxMDAlIHkgc2UgY29udmVydGlyw6EgYWwgcG9yY2VudGFqZSBhZGVjdWFkb1xyXG4gIC8vIHNlZ8O6biBlbCB2YWxvciBxdWUgc2UgbGUgcGFzZVxyXG4gIEBpZiAkcyA9PSAxMDAge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfSBAZWxzZSBpZiAkcyA8IDEge1xyXG4gICAgd2lkdGggOiAkcyAqIDEwMCU7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICB3aWR0aCA6ICRzICogMSU7XHJcbiAgfVxyXG5cclxuICAvLyB3aWR0aHMgZm9yIG90aGVycyBicmVha3BvaW50c1xyXG4gIC8vIGFuY2hvcyBwYXJhIGxvcyBkZW3DoXMgYnJlYWtwb2ludHNcclxuICBAaW5jbHVkZSBlZEl0ZW1XaWR0aCgkbSwkcyxtKTsgLy9tZWRpdW1cclxuICBAaW5jbHVkZSBlZEl0ZW1XaWR0aCgkbCwkbSxsKTsgLy9sYXJnZVxyXG4gIEBpbmNsdWRlIGVkSXRlbVdpZHRoKCR4bCwkbCx4bCk7IC8veGxhcmdlXHJcbn1cclxuXHJcbi8vIGNyZWFyIHVuIGVkLWNvbnRhaW5lclxyXG4uI3skY29udGFpbmVyfSB7IEBpbmNsdWRlIGVkQ29udGFpbmVyKCkgfVxyXG5cclxuLy8gY3JlYXIgdW4gZWQtaXRlbVxyXG4uI3skaXRlbX0ge1xyXG4gIEBpbmNsdWRlIGVkSXRlbSgpO1xyXG5cclxuICAvLyB1biBlZC1pdGVtIGEgbGEgdmV6IHB1ZWRlIHNlciBlZC1jb250YWluZXJcclxuICAvLyBwYXJhIGV2aXRhciBhbmlkYWNpb25lcyBpbm5lY2VzYXJpYXNcclxuICAmLiN7JGNvbnRhaW5lcn17XHJcbiAgICBwYWRkaW5nLWxlZnQgOiAwO1xyXG4gICAgcGFkZGluZy1yaWdodCA6IDA7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBCcmVha3BvaW50c1xyXG5AbWl4aW4gY29yZUdyaWQoKXtcclxuICBAZWFjaCAkc2l6ZSwgJHNjcmVlbi1zaXplIGluICRicmVha3BvaW50c3tcclxuICAgIEBpZiAkc2l6ZSA9PSBzIHtcclxuICAgICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAyMCB7XHJcbiAgICAgICAgLnMtI3skaSo1fSxcclxuICAgICAgICAuI3skaXRlbX0ucy0jeyRpKjV9IHtcclxuICAgICAgICAgIHdpZHRoOiAkaSAqIDUlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBAZWFjaCAkZnJhY3Rpb24gaW4gJGZyYWN0aW9uc3tcclxuICAgICAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoICRmcmFjdGlvbntcclxuICAgICAgICAgIC5zLSN7JGl9LSN7JGZyYWN0aW9ufSxcclxuICAgICAgICAgIC4jeyRpdGVtfS5zLSN7JGl9LSN7JGZyYWN0aW9ufSB7XHJcbiAgICAgICAgICAgIHdpZHRoOiAoMTAwJSAvICRmcmFjdGlvbikgKiAkaTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gQGVsc2Uge1xyXG4gICAgICBAbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiAkc2NyZWVuLXNpemUpe1xyXG4gICAgICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggMjAge1xyXG4gICAgICAgICAgLiN7JHNpemV9LSN7JGkqNX0sXHJcbiAgICAgICAgICAuI3skaXRlbX0uI3skc2l6ZX0tI3skaSo1fXtcclxuICAgICAgICAgICAgd2lkdGg6ICRpICogNSU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEBlYWNoICRmcmFjdGlvbiBpbiAkZnJhY3Rpb25zIHtcclxuICAgICAgICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJGZyYWN0aW9ue1xyXG4gICAgICAgICAgICAuI3skc2l6ZX0tI3skaX0tI3skZnJhY3Rpb259LFxyXG4gICAgICAgICAgICAuI3skaXRlbX0uI3skc2l6ZX0tI3skaX0tI3skZnJhY3Rpb259IHtcclxuICAgICAgICAgICAgICB3aWR0aDogKDEwMCUgLyAkZnJhY3Rpb24pICogJGlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJcclxuLy8gQ09MT1JFUyBNRU5VXHJcbiRtZW51LWJnOiB0cmFuc3BhcmVudDtcclxuJG1lbnUtYmctaG92ZXI6IGRhcmtlbigkbWVudS1iZywxMCk7XHJcbiRtZW51LWNvbG9yLWE6ICRzZWNvbmQtY29sb3I7XHJcbiRtZW51LWNvbG9yLWEtaG92ZXI6ICRzZWNvbmQtY29sb3I7XHJcbiRtZW51LXRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiRtZW51LWJvcmRlcjogbm9uZTtcclxuJG1lbnUtaGVpZ2h0OiAzcmVtO1xyXG5cclxuLy8gVkFSSUFCTEVTIEVYVFJBU1xyXG4kdHJhbnNpdGlvbjogYWxsIC4zcztcclxuJGd1dHRlcjogMWVtO1xyXG4kYm9yZGVyLW1haW46IG5vbmU7XHJcbiRib3JkZXI6IDFweCBzb2xpZCByZ2JhKCNmZmYsLjEpO1xyXG4kaGVhZGVyLXdpZHRoOiAxNjBweDtcclxuJHZwOiBsO1xyXG5cclxuLy8gRVNUSUxPUyBCQVNFXHJcbiRib2R5LS1iYWNrZ3JvdW5kICA6ICRiZy1jb2xvcjsgICAgICAgICAgICAgICAgICAgICAgLy8gZm9uZG8gcGFyYSBlbCBib2R5XHJcbiRib2R5LS1mb250LWZhbWlseSA6ICRtYWluLWZvbnQ7ICAgLy8gZnVlbnRlIHByZWRldGVybWluYWRhXHJcbiRib2R5LS1jb2xvciAgICAgICA6ICRmb250cy1jb2xvcjsgICAgICAgICAgICAgICAgICAgICAgLy8gY29sb3IgZGUgdGV4dG8gcHJlZGV0ZXJtaW5hZG9cclxuXHJcbi8vIEVTVElMT1MgREUgRU5DQUJFWkFET1NcclxuJGhlYWRlci0tZm9udC1mYW1pbHkgICAgOiAkaGVhZGVyLWZvbnQ7ICAvLyBmdWVudGUgcGFyYSBsb3MgaGVhZGVycyAoaDEsaDIsaDMuLi4pXHJcbiRoZWFkZXItLWZvbnQtd2VpZ2h0ICAgIDogJGJvbGQ7ICAgICAgICAgICAgICAgICAgICAvLyBncm9zb3IgZGUgZnVlbnRlIHBhcmEgbG9zIGhlYWRlcnNcclxuJGhlYWRlci0tdGV4dC10cmFuc2Zvcm0gOiBub3JtYWw7ICAgICAgICAgICAgICAgICAgIC8vIG5vcm1hbCwgdXBwZXJjYXNlLCBsb3dlcmNhc2UsIGNhcGl0YWxpemVcclxuJGhlYWRlci0tY29sb3IgICAgICAgICAgOiAkaGVhZGVycy1jb2xvcjsgICAgICAgICAgICAgICAgICAgICAvLyBjb2xvciBwcmVkZXRlcm1pbmFkbyBkZSBsb3MgaGVhZGVyXHJcbiRoZWFkZXItLWJnLWNvbG9yICAgICAgIDogbm9uZTtcclxuXHJcbi8vIFRBTUHDkU8gREUgTE9TIEVOQ0FCRVpBRE9TIChoMS4uLmg2KVxyXG4kaDEtLWZvbnQtc2l6ZSA6IDJlbTtcclxuJGgyLS1mb250LXNpemUgOiAxLjZlbTtcclxuJGgzLS1mb250LXNpemUgOiAxLjNlbTtcclxuJGg0LS1mb250LXNpemUgOiAxZW07XHJcbiRoNS0tZm9udC1zaXplIDogLjllbTtcclxuJGg2LS1mb250LXNpemUgOiAuOGVtO1xyXG5cclxuLy8gRVNUSUlMT1MgREUgRU5MQUNFU1xyXG4kbGluay0tY29sb3IgOiBpbml0aWFsOyAgLy8gY29sb3IgcGFyYSBsb3MgZW5sYWNlc1xyXG5cclxuLy8gRVNUSUxPUyBERSBQw4FSUkFGT1NcclxuJHAtLWZvbnQtc2l6ZSAgIDogMWVtOyAgICAgICAgLy8gVGFtYcOxbyBkZSBmdWVudGVcclxuJHAtLWxpbmUtaGVpZ2h0IDogMS41OyAgICAgICAgLy8gQWx0dXJhIGRlIGzDrW5lYVxyXG4kcC0tbWFyZ2luICAgICAgOiAxZW07ICAgICAgICAvLyBTZXBhcmFjacOzbiBlbnRyZSB1biBww6FycmFmbyB5IGVsIHNpZ3VpZW50ZVxyXG4kcC0tZm9udC13ZWlnaHQgOiAkbm9ybWFsOyAgICAvLyBHcm9zb3IgcHJlZGV0ZXJtaW5hZG8gZGUgbGEgZnVlbnRlXHJcbiIsIi5mYW5jeWJveC13cmFwe1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50O1xyXG4gIHotaW5kZXg6IDExMDAgIWltcG9ydGFudDtcclxuICAvL2JhY2tncm91bmQ6IHJlZCAhaW1wb3J0YW50O1xyXG59XHJcbi5mYW5jeWJveC1vdmVybGF5IHtcclxuICBiYWNrZ3JvdW5kOiByZ2JhKCMwMDAsLjc1KTtcclxuICB6LWluZGV4OiAxMDAwO1xyXG59XHJcbiIsIi5zbGlkZXN7XHJcbiAgQGluY2x1ZGUgZWRJdGVtKDEwMCk7XHJcbiAgZGlzcGxheTogbm9uZTtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgLy93aWR0aDogMTAwJTtcclxuICB6LWluZGV4OiAxO1xyXG4gIC8vYm9yZGVyLXJhZGl1czogMmVtO1xyXG4gIC8vYm94LXNoYWRvdzogMCAwIDEwcHggICM0NDQ7XHJcbiAgYTpob3ZlcntcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcbiAgaW1nIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgd2lkdGggOiAxMDAlO1xyXG4gICAgaGVpZ2h0ICAgIDogYXV0bztcclxuICB9XHJcbn1cclxuLnNsaWRlc2pzLW5hdmlnYXRpb257XHJcbiAgJHNpemU6IDUwcHg7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogNTAlO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcclxuICBoZWlnaHQ6ICRzaXplO1xyXG4gIHdpZHRoOiAkc2l6ZTtcclxuICBsaW5lLWhlaWdodDogJHNpemU7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGJhY2tncm91bmQ6IHJnYmEoIzAwMCwuNSk7XHJcbiAgLy9ib3JkZXI6IDFweCBzb2xpZCAkZGFyay1ncmF5O1xyXG4gIGNvbG9yOiAjZmZmO1xyXG4gIGZvbnQtc2l6ZTogMS41ZW07XHJcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gIHRleHQtc2hhZG93OiB0ZXh0M2QoMiwkYmxhY2spO1xyXG4gIG9wYWNpdHk6IC41O1xyXG4gIHRyYW5zaXRpb246ICR0cmFuc2l0aW9uO1xyXG4gIHotaW5kZXg6IDIwMDA7XHJcbiAgJjpob3ZlcntcclxuICAgIG9wYWNpdHk6IDE7XHJcbiAgfVxyXG4gICY6OmJlZm9yZXtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHRvcDogM3B4ICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG59XHJcbi5zbGlkZXNqcy1wcmV2aW91c3tcclxuICBsZWZ0OiAxZW07XHJcbiAgJjo6YmVmb3Jle1xyXG4gICAgbGVmdDogLTNweDtcclxuICB9XHJcbn1cclxuLnNsaWRlc2pzLW5leHR7XHJcbiAgcmlnaHQ6IDFlbTtcclxuICAmOjpiZWZvcmV7XHJcbiAgICBsZWZ0OiAycHg7XHJcbiAgfVxyXG59XHJcbi5zbGlkZXNqcy1wYWdpbmF0aW9ue1xyXG4gIEBleHRlbmQgJWxpc3Qtc3R5bGU7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHotaW5kZXg6IDEwMDA7XHJcbiAgYm90dG9tOiAkZ3V0dGVyO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgcmlnaHQ6ICRndXR0ZXIqMjtcclxuICBhe1xyXG4gICAgbWFyZ2luOiAwIC41ZW07XHJcbiAgICBjb2xvcjogI0ZGRkZGRjtcclxuICAgIHRleHQtc2hhZG93OiB0ZXh0M2QoMSxyZ2JhKCMwMDAsLjUpKTtcclxuICAgICY6OmJlZm9yZXtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICB0b3A6IDAgIWltcG9ydGFudDtcclxuICAgIH1cclxuICB9XHJcbiAgQGluY2x1ZGUgdG8obSl7XHJcbiAgICB0cmFuc2Zvcm06IHNjYWxlKC44KTtcclxuICB9XHJcbn1cclxuIiwiQGZ1bmN0aW9uIGVtKCRlbCwkcGFyZW50OjE2cHgpe1xyXG4gIEByZXR1cm4gKCRlbCAvICRwYXJlbnQpICogMWVtO1xyXG59XHJcblxyXG5AZnVuY3Rpb24gcmVtKCRlbCl7XHJcbiAgQHJldHVybiAoJGVsIC8gMTZweCkgKiAxcmVtO1xyXG59XHJcbkBmdW5jdGlvbiBpbWcoJGltYWdlKXtcclxuICBAcmV0dXJuIHVybCgnLi4vaW1nLycgKyAkaW1hZ2UpO1xyXG59XHJcblxyXG5AZnVuY3Rpb24gdGV4dDNkKCRudW1lcm8sJGNvbG9yKXtcclxuICAkdGV4dC1zaGFkb3c6IDJweCAycHggJGNvbG9yO1xyXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJG51bWVybyB7XHJcbiAgICAkdGV4dC1zaGFkb3c6ICcjeyR0ZXh0LXNoYWRvd30sXHJcbiAgICAgICAgICN7JGl9cHggI3skaX1weCAjeyRjb2xvcn0nO1xyXG4gIH1cclxuICBAcmV0dXJuIHVucXVvdGUoJHRleHQtc2hhZG93KTtcclxufVxyXG5cclxuQGZ1bmN0aW9uIGJveDNkKCRudW1lcm8sJGNvbG9yKXtcclxuICAkYm94LXNoYWRvdzogMnB4IDJweCAkY29sb3I7XHJcbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkbnVtZXJvIHtcclxuICAgICRib3gtc2hhZG93OiAnI3skYm94LXNoYWRvd30sXHJcbiAgICAgICAgICN7JGl9cHggI3skaX1weCAjeyRjb2xvcn0nO1xyXG4gIH1cclxuICBAcmV0dXJuIHVucXVvdGUoJGJveC1zaGFkb3cpO1xyXG59XHJcblxyXG5AZnVuY3Rpb24gYm9yZGVyKCRjb2xvciwkYW5jaG8pe1xyXG4gIEByZXR1cm4gJGFuY2hvIHNvbGlkICRjb2xvcjtcclxufVxyXG5AZnVuY3Rpb24gc2hhZG93KCR1bml0LCRjb2xvcil7XHJcbiAgQHJldHVybiAkdW5pdCAkdW5pdCAkdW5pdCAkY29sb3I7XHJcbn1cclxuQGZ1bmN0aW9uIGltZygkbmFtZSl7XHJcbiAgQHJldHVybiB1cmwoLi4vaW1nLyN7JG5hbWV9KTtcclxufVxyXG5AZnVuY3Rpb24gY29sb3IoJG5hbWUpe1xyXG4gICRjb2xvcjogbWFwLWdldCgkc29jaWFsLWNvbG9ycywkbmFtZSk7XHJcbiAgQHJldHVybiAkY29sb3I7XHJcbn1cclxuIiwiLy8gRGV2dWVsdmUgdHJ1ZSBzaSBlbCBicmVha3BvaW50IGVzIHBhcnRlIGRlbCBjb3JlXHJcbkBmdW5jdGlvbiBpc0NvcmVCcmVha3BvaW50KCRicCl7XHJcbiAgQGlmIG1hcC1nZXQoJGJyZWFrcG9pbnRzLCRicCkge1xyXG4gICAgQHJldHVybiB0cnVlXHJcbiAgfSBAZWxzZSB7XHJcbiAgICBAcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG59XHJcblxyXG4vLyBEZXZ1ZWx2ZSB0cnVlIHNpIGVsIGJyZWFrcGludCBlcyB2w6FsaWRvIChlbSwgcmVtLCBweClcclxuQGZ1bmN0aW9uIGlzVmFsaWRCcmVha3BvaW50KCRicCl7XHJcbiAgQGlmIHR5cGUtb2YoJGJwKSA9PSBudW1iZXIgYW5kICh1bml0KCRicCkgPT0gJ3B4JyBvciB1bml0KCRicCkgPT0gJ2VtJyBvciB1bml0KCRicCkgPT0gJ3JlbScpIHtcclxuICAgIEByZXR1cm4gdHJ1ZVxyXG4gIH0gQGVsc2Uge1xyXG4gICAgQHJldHVybiBmYWxzZVxyXG4gIH1cclxufVxyXG5cclxuLy8gT2J0aWVuZSB1biBicmVha3BvaW50IGRlbCBjb3JlXHJcbkBmdW5jdGlvbiBnZXRCcCgkYnApe1xyXG4gIEByZXR1cm4gbWFwLWdldCgkYnJlYWtwb2ludHMsJGJwKVxyXG59XHJcblxyXG4vLyBDb252aWVydGUgdW4gdmFsb3IgZW4gZW0gbyByZW0gYSBweFxyXG5AZnVuY3Rpb24gdG9QeCgkdmFsdWUpe1xyXG4gIEBpZiB0eXBlLW9mKCR2YWx1ZSkgPT0gbnVtYmVyIHtcclxuICAgIEBpZiB1bml0KCR2YWx1ZSkgPT0gJ2VtJ3tcclxuICAgICAgQHJldHVybiAoJHZhbHVlIC8gMWVtKSAqIDE2cHg7XHJcbiAgICB9IEBlbHNlIGlmIHVuaXQoJHZhbHVlKSA9PSAncmVtJ3tcclxuICAgICAgQHJldHVybiAoJHZhbHVlIC8gMXJlbSkgKiAxNnB4XHJcbiAgICB9IEBlbHNlIGlmIHVuaXQoJHZhbHVlKSA9PSAncHgnIHtcclxuICAgICAgQHJldHVybiAkdmFsdWU7XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgQGVycm9yIFwiTGEgZnVuY2lvbiB0b1B4KCkgc29sbyBhY2VwdGEgbnVtZXJvcyBlbiBlbSBvIHJlbSBvIHB4XCJcclxuICAgIH1cclxuICB9IEBlbHNlIHtcclxuICAgIEBlcnJvciBcIkxhIGZ1bmNpb24gdG9QeCgpIHNvbG8gYWNlcHRhIG51bWVyb3MgZW4gZW0gbyByZW1cIlxyXG4gIH1cclxufVxyXG5cclxuLy8gRnJvbSAobWF5b3IgcXVlICRicClcclxuQG1peGluIGZyb20oJGZyb20pe1xyXG4gIEBpZiBpc0NvcmVCcmVha3BvaW50KCRmcm9tKXtcclxuICAgIEBpZiAkZnJvbSA9PSBzIHtcclxuICAgICAgQGNvbnRlbnRcclxuICAgIH1cclxuICAgIEBlbHNlIHtcclxuICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogZ2V0QnAoJGZyb20pKXsgQGNvbnRlbnQgfVxyXG4gICAgfVxyXG4gIH0gQGVsc2UgaWYgaXNWYWxpZEJyZWFrcG9pbnQoJGZyb20pe1xyXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJGZyb20peyBAY29udGVudCB9XHJcbiAgfSBAZWxzZSB7XHJcbiAgICBAZXJyb3IgJ0VsIG1peGluIGZyb20oKSBzb2xvIHB1ZWRlIHJlY2liaXIgdW4gYnJlYWtwb2ludCBkZWwgQ29yZSAoI3ttYXAta2V5cygkYnJlYWtwb2ludHMpfSkgbyB1biBuw7ptZXJvIGVuIHB4LCBlbSBvIHJlbSdcclxuICB9XHJcbn1cclxuXHJcbi8vIFRvIChlcyBtZW5vciBxdWUgJHRvKVxyXG5AbWl4aW4gdG8oJHRvKXtcclxuICAvLyBTaSBlcyB1biBicmVha3BvaW50IGRlbCBjb3JlXHJcbiAgQGlmIGlzQ29yZUJyZWFrcG9pbnQoJHRvKXtcclxuICAgIEBpZiAkdG8gPT0gcyB7XHJcbiAgICAgIEBjb250ZW50O1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGggOiBnZXRCcCgkdG8pIC0gMXB4KSB7IEBjb250ZW50IH1cclxuICAgIH1cclxuICB9XHJcbiAgLy8gU2kgZXMgdW4gYnJlYWtwb2ludCB2w6FsaWRvIChweCwgZW0sIHJlbSlcclxuICBAZWxzZSBpZiBpc1ZhbGlkQnJlYWtwb2ludCgkdG8pe1xyXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogdG9QeCgkdG8pIC0gMXB4KXsgQGNvbnRlbnQgfVxyXG4gIH1cclxuICAvLyBTaSBubyBlcyB1biBicmVha3BvaW50IHbDoWxpZG8gbGFuemFyIGVycm9yXHJcbiAgQGVsc2Uge1xyXG4gICAgQGVycm9yICdFbCBtaXhpbiB0bygpIHNvbG8gcHVlZGUgcmVjaWJpciB1biBicmVha3BvaW50IGRlbCBDb3JlICgje21hcC1rZXlzKCRicmVha3BvaW50cyl9KSBvIHVuIG7Dum1lcm8gZW4gcHgsIGVtIG8gcmVtJ1xyXG4gIH1cclxufVxyXG5cclxuQG1peGluIGZyb21UbygkZnJvbSwkdG8pe1xyXG4gIC8vIFNpIGFtYm9zIHNvbiBicmVha3BvaW50cyBkZWwgY29yZVxyXG4gIEBpZiBpc0NvcmVCcmVha3BvaW50KCRmcm9tKSBhbmQgaXNDb3JlQnJlYWtwb2ludCgkdG8pe1xyXG4gICAgQGlmIGdldEJwKCR0bykgPiBnZXRCcCgkZnJvbSkge1xyXG4gICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoIDogZ2V0QnAoJGZyb20pKSBhbmQgKG1heC13aWR0aCA6IGdldEJwKCR0bykgLSAxcHgpIHtcclxuICAgICAgICBAY29udGVudFxyXG4gICAgICB9XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgQGVycm9yIFwiRWwgc2VndW5kbyBhcmd1bWVudG8gZGVsIG1peGluIGZyb21UbyBkZWJlIHNlciBtYXlvciBxdWUgZWwgcHJpbWVyb1wiXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBTaSBzb2xvICRmcm9tIGVzIGJyZWFrcG9pbnQgZGVsIGNvcmVcclxuICBAZWxzZSBpZiBpc0NvcmVCcmVha3BvaW50KCRmcm9tKSBhbmQgbm90IGlzQ29yZUJyZWFrcG9pbnQoJHRvKXtcclxuICAgIEBpZiBpc1ZhbGlkQnJlYWtwb2ludCgkdG8pIHtcclxuICAgICAgQGlmIHRvUHgoJHRvKSA+IHRvUHgoZ2V0QnAoJGZyb20pKSB7XHJcbiAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aCA6IGdldEJwKCRmcm9tKSkgYW5kIChtYXgtd2lkdGggOiB0b1B4KCR0bykgLSAxcHgpIHtcclxuICAgICAgICAgIEBjb250ZW50XHJcbiAgICAgICAgfVxyXG4gICAgICB9IEBlbHNlIHtcclxuICAgICAgICBAZXJyb3IgXCJFbCBzZWd1bmRvIGFyZ3VtZW50byBkZWwgbWl4aW4gZnJvbVRvIGRlYmUgc2VyIG1heW9yIHF1ZSBlbCBwcmltZXJvXCJcclxuICAgICAgfVxyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgIEBlcnJvciBcIkVsIHNlZ3VuZG8gYXJndW1lbnRvIGRlbCBtaXhpbiBmcm9tVG8oKSBkZWJlIHNlciB1biBicmVha3BvaW50IGRlbCBDb3JlICgje21hcC1rZXlzKCRicmVha3BvaW50cyl9KSBvIHVuIG7Dum1lcm8gZW4gcHgsIGVtIG8gcmVtXCJcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFNpIHNvbG8gJHRvIGVzIGJyZWFrcG9pbnQgZGVsIGNvcmVcclxuICBAZWxzZSBpZiBub3QgaXNDb3JlQnJlYWtwb2ludCgkZnJvbSkgYW5kIGlzQ29yZUJyZWFrcG9pbnQoJHRvKSB7XHJcbiAgICBAaWYgaXNWYWxpZEJyZWFrcG9pbnQoJGZyb20pIHtcclxuICAgICAgQGlmIHRvUHgoZ2V0QnAoJHRvKSkgPiB0b1B4KCRmcm9tKXtcclxuICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoIDogJGZyb20pIGFuZCAobWF4LXdpZHRoIDogZ2V0QnAoJHRvKSAtIDFweCkge1xyXG4gICAgICAgICAgQGNvbnRlbnRcclxuICAgICAgICB9XHJcbiAgICAgIH0gQGVsc2Uge1xyXG4gICAgICAgIEBlcnJvciBcIkVsIHNlZ3VuZG8gYXJndW1lbnRvIGRlbCBtaXhpbiBmcm9tVG8gZGViZSBzZXIgbWF5b3IgcXVlIGVsIHByaW1lcm9cIlxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBAZWxzZSB7XHJcbiAgICAgIEBlcnJvciBcIkVsIHByaW1lciBhcmd1bWVudG8gZGVsIG1peGluIGZyb21UbygpIGRlYmUgc2VyIHVuIGJyZWFrcG9pbnQgZGVsIENvcmUgKCN7bWFwLWtleXMoJGJyZWFrcG9pbnRzKX0pIG8gdW4gbsO6bWVybyBlbiBweCwgZW0gbyByZW1cIlxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU2kgbm8gc29uIGJyZWFrcG9pbnRzIGRlbCBjb3JlIHBlcm8gc29uIGJyZWFrcG9pbnRzIHbDoWxpZG9zIChweCwgZW0sIHJlbSlcclxuICBAZWxzZSBpZiBpc1ZhbGlkQnJlYWtwb2ludCgkZnJvbSkgYW5kIGlzVmFsaWRCcmVha3BvaW50KCR0byl7XHJcbiAgICBAaWYgdG9QeCgkdG8pID4gdG9QeCgkZnJvbSkge1xyXG4gICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoIDogJGZyb20pIGFuZCAobWF4LXdpZHRoIDogdG9QeCgkdG8pIC0gMXB4KSB7XHJcbiAgICAgICAgQGNvbnRlbnRcclxuICAgICAgfVxyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgIEBlcnJvciBcIkVsIHNlZ3VuZG8gYXJndW1lbnRvIGRlbCBtaXhpbiBmcm9tVG8gZGViZSBzZXIgbWF5b3IgcXVlIGVsIHByaW1lcm9cIlxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU2kgYWwgbWVub3MgaGF5IHVuIGJyZWFrcG9pbnQgaW52w6FsaWRvXHJcbiAgQGVsc2Uge1xyXG4gICAgQGVycm9yICdMb3MgYXJndW1lbnRvcyBkZWwgbWl4aW4gZnJvbVRvKCkgZGViZW4gc2VyIGJyZWFrcG9pbnRzIGRlbCBDb3JlICgje21hcC1rZXlzKCRicmVha3BvaW50cyl9KSBvIG7Dum1lcm9zIGVuIHB4LCBlbSBvIHJlbSc7XHJcbiAgfVxyXG59XHJcbiIsIi8vTW9kaWZpcXVlIGxvcyBlc3RpbG9zIGJhc2UgZGVzZGUgbGFzIHZhcmlhYmxlc1xyXG5cclxuYm9keSB7XHJcbiAgYmFja2dyb3VuZCAgOiAkYm9keS0tYmFja2dyb3VuZDtcclxuICBmb250LWZhbWlseSA6ICRib2R5LS1mb250LWZhbWlseTtcclxuICBjb2xvciAgICAgICA6ICRib2R5LS1jb2xvcjtcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuXHJcbn1cclxuXHJcbmEge1xyXG4gIGNvbG9yICAgICAgICAgICA6IGluaGVyaXQ7XHJcbiAgdGV4dC1kZWNvcmF0aW9uIDogbm9uZTtcclxufVxyXG5cclxucCwgYmxvY2txdW90ZSwgbGkge1xyXG4gIGZvbnQtc2l6ZSAgIDogJHAtLWZvbnQtc2l6ZTtcclxuICBsaW5lLWhlaWdodCA6ICRwLS1saW5lLWhlaWdodDtcclxufVxyXG5cclxucCB7XHJcbiAgbWFyZ2luIDogMCAwICRwLS1tYXJnaW4gMDtcclxuXHJcbiAgJjpsYXN0LWNoaWxkLFxyXG4gICY6b25seS1jaGlsZCB7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgfVxyXG59XHJcblxyXG5ibG9ja3F1b3RlIHtcclxuXHJcbn1cclxuXHJcbi8vIEVzdGlsb3MgYsOhc2ljb3MgZGUgbG9zIGVuY2FiZXphZG9zXHJcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYge1xyXG4gIGZvbnQtZmFtaWx5ICAgIDogJGhlYWRlci0tZm9udC1mYW1pbHk7XHJcbiAgZm9udC13ZWlnaHQgICAgOiAkaGVhZGVyLS1mb250LXdlaWdodDtcclxuICB0ZXh0LXRyYW5zZm9ybSA6ICRoZWFkZXItLXRleHQtdHJhbnNmb3JtO1xyXG4gIGNvbG9yICAgICAgICAgIDogJGhlYWRlci0tY29sb3I7XHJcbiAgYmFja2dyb3VuZCAgICAgOiAkaGVhZGVyLS1iZy1jb2xvciAgO1xyXG4gIG1hcmdpbiAgICAgICAgIDogMDtcclxuICB3aWR0aDogMTAwJTtcclxuICAvL3RleHQtYWxpZ246IGNlbnRlcjtcclxuICAvL21hcmdpbi1ib3R0b206IDFlbTtcclxufVxyXG5cclxuLy8gVGFtYcOxb3MgeSBlc3RpbG9zIGRlIGxvcyBlbmNhYmV6YWRvczpcclxuaDEge1xyXG4gIGZvbnQtc2l6ZSA6ICRoMS0tZm9udC1zaXplO1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjI7XHJcbn1cclxuXHJcbmgyIHtcclxuICBmb250LXNpemUgOiAkaDItLWZvbnQtc2l6ZTtcclxufVxyXG5cclxuaDMge1xyXG4gIGZvbnQtc2l6ZSA6ICRoMy0tZm9udC1zaXplO1xyXG59XHJcblxyXG5oNCB7XHJcbiAgZm9udC1zaXplIDogJGg0LS1mb250LXNpemU7XHJcbn1cclxuXHJcbmg1IHtcclxuICBmb250LXNpemUgOiAkaDUtLWZvbnQtc2l6ZTtcclxufVxyXG5cclxuaDYge1xyXG4gIGZvbnQtc2l6ZSA6ICRoNi0tZm9udC1zaXplO1xyXG59XHJcbnNlY3Rpb257XHJcbiAgd2lkdGg6IGNhbGMoMTAwdncgLSAjeyRoZWFkZXItd2lkdGh9KTtcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIG92ZXJmbG93LXk6IGF1dG87XHJcbiAgcGFkZGluZy10b3A6IDYwcHg7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIEBpbmNsdWRlIHRvKCR2cCl7XHJcbiAgICB3aWR0aDogMTAwdnc7XHJcbiAgICBsZWZ0OiAkaGVhZGVyLXdpZHRoO1xyXG4gIH1cclxuICBAaW5jbHVkZSB0bygkdnApe1xyXG4gICAgd2lkdGg6IDEwMHZ3O1xyXG4gICAgbGVmdDogJGhlYWRlci13aWR0aDtcclxuICB9XHJcbn1cclxuIiwiJGJsdWUgICAgICAgIDogc3RlZWxibHVlO1xyXG4kZGFyay1ibHVlICAgOiBkYXJrZW4oJGJsdWUsMTUlKTtcclxuJGxpZ2h0LWJsdWUgIDogbGlnaHRlbigkYmx1ZSwyNSUpO1xyXG4kYmxhY2sgICAgICAgOiAjMDcwRDEyO1xyXG4kd2hpdGUgICAgICAgOiAjRkRGREZEO1xyXG4kZ3JheSAgICAgICAgOiAjMUMyNjJCO1xyXG4kZGFyay1ncmF5ICAgOiAjNDQ0O1xyXG4kbGlnaHQtZ3JheSAgOiAjMUMyNjJCO1xyXG4kcmVkICAgICAgICAgOiBkYXJrZW4odG9tYXRvLDEwKTtcclxuJGRhcmstcmVkICAgIDogZGFya2VuKHJlZCwyMCk7XHJcbiRsaWdodC1yZWQgICA6IGxpZ2h0ZW4ocmVkLDI1KTtcclxuJGdyZWVuICAgICAgIDogIzhBQ0I4MjtcclxuJGRhcmstZ3JlZW4gIDogZGFya2VuKCRncmVlbiwxMCk7XHJcbiRsaWdodC1ncmVlbiA6IGxpZ2h0ZW4oJGdyZWVuLDIwKTtcclxuJG9yYW5nZSAgICAgIDogI0VBNEUyRTtcclxuJGRhcmstb3JhbmdlIDogZGFya2VuKCRvcmFuZ2UsMTApO1xyXG4kbGlnaHQtb3JhbmdlOiBsaWdodGVuKCRvcmFuZ2UsMTApO1xyXG5cclxuJHNvY2lhbC1jb2xvcnM6KFxyXG4gIGZhY2Vib29rICAgIDogIzNiNTk5OCxcclxuICB0d2l0dGVyICAgICA6ICM1NWFjZWUsXHJcbiAgZ29vZ2xlcGx1cyAgOiAjZGQ0YjM5LFxyXG4gIHlvdXR1YmUgICAgIDogI2JiMDAwMCxcclxuICBsaW5rZWRpbiAgICA6ICMwMDdiYjUsXHJcbiAgaW5zdGFncmFtICAgOiAjZTk1OTUwLFxyXG4gIHdoYXRzYXBwICAgIDogIzRkYzI0NyxcclxuICBwaW50ZXJlc3QgICA6ICNjYjIwMjcsXHJcbiAgdmluZSAgICAgICAgOiAjMDBiZjhmLFxyXG4gIHNuYXBjaGF0ICAgIDogI2ZmZmMwMCxcclxuICBzaWdtYXBjcyAgICA6ICMwMDg1Q0NcclxuKTtcclxuXHJcblxyXG4kc2lnbWEtY29sb3I6ICMwMDkxZWE7IC8vaHNsKDIwMSw1MCw0MCk7XHJcbiRtYWluLWNvbG9yOiAkZGFyay1ibHVlO1xyXG4kc2Vjb25kLWNvbG9yOiAkd2hpdGU7XHJcbiRmb250cy1jb2xvcjogJGRhcmstZ3JheTtcclxuJGhlYWRlcnMtY29sb3I6IGRhcmtlbigkZm9udHMtY29sb3IsMTApO1xyXG4kaGVhZGVyLWJnOiAjMUMyNjJCO1xyXG4kYmctY29sb3I6ICRzZWNvbmQtY29sb3I7XHJcbiIsIi5tYWluLW5hdntcclxuICBoZWlnaHQ6IGNhbGMoMTAwdmggLSAjeyRoZWFkZXItd2lkdGh9IC0gNWVtKTtcclxuICBtYXgtaGVpZ2h0OiA2MDBweDtcclxufVxyXG4ubWFpbi1tZW51e1xyXG4gIGhlaWdodDogMTAwJTtcclxuICBAZXh0ZW5kICVsaXN0LXN0eWxlO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBsaXtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZmxleDogYXV0bztcclxuICAgIGJvcmRlci1ib3R0b206IGJvcmRlcihyZ2JhKCR3aGl0ZSwuMSksMXB4KTtcclxuICAgIGhlaWdodDogYXV0bztcclxuICB9XHJcbiAgYXtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgd2lkdGg6IDEwMCUgO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgdHJhbnNpdGlvbjogJHRyYW5zaXRpb247XHJcbiAgICBmb250LXNpemU6IC43NWVtO1xyXG4gICAgY29sb3I6IHJnYmEoJHdoaXRlLCAuMyk7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgc3BhbntcclxuICAgICAgZm9udC1zaXplOiAyZW07XHJcbiAgICB9XHJcbiAgICAmOmhvdmVyLCYuc2VsZWN0ZWR7XHJcbiAgICAgIGNvbG9yOiByZ2JhKCR3aGl0ZSwuNzUpO1xyXG4gICAgfVxyXG4gICAgLy9iYWNrZ3JvdW5kOiB0b21hdG87XHJcbiAgfVxyXG59XHJcbiIsIiRjb2xvci1oZWFkZXI6IHJnYmEoJHdoaXRlLC40KTtcclxuJGxoOiAzcmVtO1xyXG4ubWFpbi1oZWFkZXJ7XHJcbiAgd2lkdGg6ICRoZWFkZXItd2lkdGg7XHJcbiAgaGVpZ2h0OiAxMDB2aDtcclxuICBiYWNrZ3JvdW5kOiAkaGVhZGVyLWJnO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgb3ZlcmZsb3cteTogYXV0bztcclxuICB6LWluZGV4OiA5MDtcclxuICB0b3A6IDA7XHJcbiAgQGluY2x1ZGUgZnJvbSgkdnApe1xyXG4gICAgbGVmdDogMDtcclxuICB9XHJcbn1cclxuLnRvcF9fdGl0bGV7XHJcbiAgcG9zaXRpb246IGZpeGVkO1xyXG4gIHotaW5kZXg6IDEwMDtcclxuICBjb2xvcjogJHdoaXRlO1xyXG4gIGgxe1xyXG4gICAgY29sb3I6IGluaGVyaXQ7XHJcbiAgfVxyXG4gIEBpbmNsdWRlIHRvKCR2cCl7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGJhY2tncm91bmQ6ICRibGFjaztcclxuICAgIGxlZnQ6IDA7XHJcbiAgICB0cmFuc2l0aW9uOiAkdHJhbnNpdGlvbjtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBoZWlnaHQ6ICRsaDtcclxuICAgIGF7XHJcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICB3aWR0aDogJGxoKjEuNTtcclxuICAgICAgbGluZS1oZWlnaHQ6ICRsaDtcclxuICAgICAgZm9udC1zaXplOiAxLjVlbTtcclxuICAgICAgYm9yZGVyLXJpZ2h0OiBib3JkZXIocmdiYSgkd2hpdGUsLjIpLDFweCk7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuXHJcbiAgICB9XHJcbiAgICBoMXtcclxuXHJcbiAgICAgIGZvbnQtc2l6ZTogMS41ZW07XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiAkbGg7XHJcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICAgIHBhZGRpbmctbGVmdDogMWVtO1xyXG4gICAgfVxyXG4gIH1cclxuICBAaW5jbHVkZSBmcm9tKCR2cCl7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgYmFja2dyb3VuZDogJGdyZWVuO1xyXG4gICAgaGVpZ2h0OiAkbGggKi43NTtcclxuICAgIHRvcDogY2FsYygjeyRoZWFkZXItd2lkdGh9IC0gMWVtKTtcclxuICAgIGF7XHJcbiAgICAgIGJvdHRvbTogMDtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICAgIGgxe1xyXG4gICAgICB3aWR0aDogJGhlYWRlci13aWR0aDtcclxuICAgICAgZm9udC1zaXplOiAxZW07XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgbGluZS1oZWlnaHQ6ICRsaCAqLjc1O1xyXG4gICAgICBoZWlnaHQ6ICRsaCAqLjc1O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4uYWN0aXZlID4gLnRvcF9fdGl0bGV7XHJcbiAgQGluY2x1ZGUgdG8oJHZwKXtcclxuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAjeyRoZWFkZXItd2lkdGh9KTtcclxuICAgIGxlZnQ6ICRoZWFkZXItd2lkdGg7XHJcbiAgfVxyXG59XHJcbi50b3B7XHJcbiAgYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KFxyXG4gICAgICAgICAgICAgICM3NzcgMSUsXHJcbiAgICAgICAgICAgICAgIzMzM1xyXG4gICk7XHJcbiAgcGFkZGluZzogLjVlbSAwO1xyXG4gIGltZ3tcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG5cclxuICB9XHJcbn1cclxuLmJvdHRvbXtcclxuICBtYXJnaW4tdG9wOiBhdXRvO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBjb2xvcjogcmdiYSgkd2hpdGUsIC4yKTtcclxuICBmb250LXNpemU6IC44ZW07XHJcbiAgc3BhbntcclxuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XHJcbiAgfVxyXG59XHJcbiIsIi5ob21le1xyXG4gIGJhY2tncm91bmQ6IGltZygnYmcuanBnJykgY2VudGVyIGNlbnRlciAvIGNvdmVyIG5vLXJlcGVhdDtcclxuXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcclxuXHJcbiAgJjo6YWZ0ZXJ7XHJcbiAgICBjb250ZW50OiAnJztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGJhY2tncm91bmQ6IHJnYmEoJGhlYWRlci1iZywuNzUpO1xyXG4gIH1cclxuICAmX19tZXNzYWdlIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHotaW5kZXg6IDUwO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNWVtO1xyXG4gICAgY29sb3I6ICR3aGl0ZTtcclxuICB9XHJcbiAgJl9fc3BhbiwgJl9fcHJve1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBmb250LXNpemU6IDEuM2VtO1xyXG4gICAgY29sb3I6IGluaGVyaXQ7XHJcbiAgfVxyXG4gICZfX25hbWV7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXNpemU6IDNlbTtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAxO1xyXG4gICAgY29sb3I6IGluaGVyaXQ7XHJcbiAgfVxyXG4gICZfX3Byb3tcclxuICAgIHBhZGRpbmctdG9wOiAxZW07XHJcblxyXG4gIH1cclxufVxyXG4iLCIkc2l6ZTogM3JlbTtcbiRyZXN1bWUtYmc6ICNFQkYwREY7XG4kYmVmb3JlLWJnOiAjOEFDQjgyO1xuJHBsOiAyLjVlbTtcbiRjb2xvcjogJGdyZWVuO1xuYm9keXtcbiAgYmFja2dyb3VuZDogJHJlc3VtZS1iZztcbn1cbi5yZXN1bWV7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIHBhZGRpbmctYm90dG9tOiAzZW07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgJl9fY29udGFpbmVye1xuICAgIEBpbmNsdWRlIGVkQ29udGFpbmVyO1xuICAgIG1hcmdpbi10b3A6IDNlbTtcbiAgfVxuICAmX19oaXN0b3J5LCAmX19za2lsbHN7XG4gICAgQGluY2x1ZGUgZWRJdGVtKDEwMCw1MCk7XG4gIH1cbiAgJl9faGlzdG9yeXtcbiAgICBwYWRkaW5nLWxlZnQ6ICRwbDtcbiAgICBtYXJnaW4tdG9wOiAyZW07XG4gICAgYm9yZGVyLWxlZnQ6IGJvcmRlcigkd2hpdGUsM3B4KTtcbiAgICAmOmZpcnN0LWNoaWxke1xuICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICB9XG4gIH1cbiAgJl9fc2tpbGxze1xuICAgIC8vYmFja2dyb3VuZDogbGlnaHRncmVlbjtcbiAgICBAaW5jbHVkZSB0byhtKXtcbiAgICAgIG1hcmdpbi10b3A6IDJlbTtcbiAgICB9XG4gICAgQGluY2x1ZGUgZnJvbShsKXtcbiAgICAgIG1hcmdpbi10b3A6IC0uNWVtO1xuICAgIH1cbiAgICAmX190aXRsZXtcbiAgICAgICRoZWlndGg6IDMwcHg7XG4gICAgICAkdG9wOiAtNXB4O1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgY29sb3I6ICR3aGl0ZTtcbiAgICAgIGJhY2tncm91bmQ6ICRjb2xvcjtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXgtd2lkdGg6IDMwMHB4O1xuICAgICAgbWFyZ2luOiBhdXRvIDtcbiAgICAgIGhlaWdodDogJGhlaWd0aDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAkaGVpZ3RoO1xuICAgICAgZm9udC1zaXplOiAxZW07XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgLy9AaW5jbHVkZSBmcm9tKGwpe1xuICAgICAgLy8gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICAgIC8vfVxuICAgICAgJjo6YmVmb3JlLCAmOjphZnRlcntcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICRoZWlndGg7XG4gICAgICAgIGJhY2tncm91bmQ6IGRhcmtlbigkY29sb3IsMTUlKTtcbiAgICAgICAgei1pbmRleDogLTEgIWltcG9ydGFudDtcbiAgICAgICAgYm9yZGVyOiBib3JkZXIodHJhbnNwYXJlbnQsNXB4KTtcbiAgICAgICAgQGluY2x1ZGUgZnJvbShsKXtcbiAgICAgICAgICB6LWluZGV4OiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgJjo6YmVmb3Jle1xuICAgICAgICBsZWZ0OiBjYWxjKCgjeyRoZWlndGh9IC0gNXB4KSAqIC0xKTtcbiAgICAgICAgdG9wOiAkdG9wO1xuICAgICAgICBib3JkZXItcmlnaHQtY29sb3I6IGRhcmtlbigkZ3JlZW4sMzApO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAzcHggMCAwIDNweDtcbiAgICAgIH1cbiAgICAgICY6OmFmdGVye1xuICAgICAgICByaWdodDogY2FsYygoI3skaGVpZ3RofSAtIDVweCkgKiAtMSk7XG4gICAgICAgIGJvdHRvbTogJHRvcDtcbiAgICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IGRhcmtlbigkZ3JlZW4sMzApO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAwIDNweCAzcHggMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgJl9fdGl0bGV7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG1hcmdpbi10b3A6IDJlbTtcbiAgICAmOm50aC1vZi10eXBlKDEpe1xuICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICB9XG4gICAgJiA+IHNwYW4sICYgPiBoM3tcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG4gICAgJiA+IHNwYW57XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAvL2xlZnQ6IC0kcGw7XG4gICAgICBsZWZ0OiAtJHNpemU7XG4gICAgICB3aWR0aDogJHNpemU7XG4gICAgICBoZWlnaHQ6ICRzaXplO1xuICAgICAgbGluZS1oZWlnaHQ6ICRzaXplO1xuICAgICAgYmFja2dyb3VuZDogJGNvbG9yO1xuICAgICAgY29sb3I6ICR3aGl0ZTtcbiAgICAgIGZvbnQtc2l6ZTogMS41ZW07XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMzUlLC0yNSUpO1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIH1cbiAgICAmID4gaDN7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIH1cblxuICB9XG4gICZfX2NvbnRlbnR7XG4gICAgbWFyZ2luLXRvcDogMmVtO1xuICAgIGg0e1xuICAgICAgZm9udC1zaXplOiAxZW07XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIH1cbiAgICBoNXtcbiAgICAgIGNvbG9yOiByZ2JhKCRncmF5LC40NSk7XG4gICAgICBtYXJnaW46IC41ZW0gMCAxZW07XG4gICAgfVxuICB9XG59XG4uZGF0ZXtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW4tYm90dG9tOiAxLjVlbTtcbiAgcHtcbiAgICBiYWNrZ3JvdW5kOiAkY29sb3I7XG4gICAgZGlzcGxheTogdGFibGU7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAkaGVpZ2h0OiAyMHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAkaGVpZ2h0O1xuICAgIGhlaWdodDogJGhlaWdodDtcbiAgICBwYWRkaW5nOiAwIDFlbTtcbiAgICBjb2xvcjogJHdoaXRlO1xuICAgIGZvbnQtc2l6ZTogLjllbTtcbiAgICAmOmJlZm9yZSwgJjo6YWZ0ZXJ7XG4gICAgICBjb250ZW50OiAnJztcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB9XG4gICAgJjpiZWZvcmV7XG4gICAgICAkc2l6ZS1jaXJjbGU6IDE1cHg7XG4gICAgICB3aWR0aDogJHNpemUtY2lyY2xlO1xuICAgICAgaGVpZ2h0OiAkc2l6ZS1jaXJjbGU7XG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICBiYWNrZ3JvdW5kOiAkd2hpdGU7XG4gICAgICBsZWZ0OiAtJHNpemU7XG4gICAgICB0b3A6IDUwJTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB9XG4gICAgJjo6YWZ0ZXJ7XG4gICAgICBsZWZ0OiAtJGhlaWdodC8yO1xuICAgICAgdG9wOiAwO1xuICAgICAgd2lkdGg6IDA7XG4gICAgICBoZWlnaHQ6IDA7XG4gICAgICBib3JkZXI6ICRoZWlnaHQvMiBzb2xpZCAkY29sb3I7XG4gICAgICBib3JkZXItbGVmdC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgfVxuICB9XG4gICYuZ3JlZW57XG4gICAgcHtcbiAgICAgICY6OmJlZm9yZXtcbiAgICAgICAgYmFja2dyb3VuZDogJGNvbG9yICFpbXBvcnRhbnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbiIsIltjbGFzc149XCJpY29uLVwiXTo6YmVmb3Jle1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB0b3A6IDNweDtcclxufVxyXG5ib2R5e1xyXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAvL292ZXJmbG93OiBoaWRkZW47XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHdpZHRoOiAxMDB2dztcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIEBpbmNsdWRlIHRvKCR2cCl7XHJcbiAgICBsZWZ0OiAkaGVhZGVyLXdpZHRoKi0xO1xyXG4gICAgdHJhbnNpdGlvbjogJHRyYW5zaXRpb247XHJcbiAgfVxyXG4gIEBpbmNsdWRlIGZyb20oJHZwKXtcclxuICAgIHBhZGRpbmctbGVmdDogJGhlYWRlci13aWR0aDtcclxuICB9XHJcbiAgJi5hY3RpdmV7XHJcbiAgICBsZWZ0OiAwO1xyXG4gIH1cclxufVxyXG4udGl0bGVfcGFnZXtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZm9udC1zaXplOiAyZW07XHJcbiAgc3BhbntcclxuICAgIGZvbnQtc2l6ZTogMmVtO1xyXG4gIH1cclxufVxyXG4vLy5jb250YWluZXJ7XHJcbi8vICBoZWlnaHQ6IDYwMHB4O1xyXG4vLyAgLy9iYWNrZ3JvdW5kOiAjMDAwO1xyXG4vLyAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xyXG4vLyAgb3ZlcmZsb3cteTogYXV0bztcclxuLy99XHJcbi8vLnN1Yi10aXRsZXtcclxuLy8gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuLy8gIHRleHQtYWxpZ246IGxlZnQ7XHJcbi8vICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4vLyAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xyXG4vLyAgaDMsIHNwYW57XHJcbi8vICAgIGRpc3BsYXk6IGlubGluZTtcclxuLy8gIH1cclxuLy8gIGgze1xyXG4vLyAgfVxyXG4vLyAgc3BhbntcclxuLy8gICAgJHNpemU6IDNyZW07XHJcbi8vICAgIGJhY2tncm91bmQ6ICRncmVlbjtcclxuLy8gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4vLyAgICB3aWR0aDogJHNpemU7XHJcbi8vICAgIGhlaWdodDogJHNpemU7XHJcbi8vICAgIGxpbmUtaGVpZ2h0OiAkc2l6ZTtcclxuLy8gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4vLyAgICBmb250LXNpemU6IDEuNWVtO1xyXG4vLyAgICBjb2xvcjogJHdoaXRlO1xyXG4vLyAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbi8vICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWChjYWxjKC01MCUgLSAwcHgpKTtcclxuLy9cclxuLy8gIH1cclxuLy99XHJcbiJdfQ== */
